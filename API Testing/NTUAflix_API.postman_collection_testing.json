{
	"info": {
		"_postman_id": "4f46dbda-8b74-4cdb-ae72-154c2217926a",
		"name": "NTUAflix API",
		"description": "The NTUAflix API provides programmatic access to a comprehensive database of films, television shows, actors, and film industry professionals. It is designed to offer extensive information about titles, including cast, crew, production details and user ratings. The API enables developers to integrate this rich dataset into their applications, providing users with detailed insights and information about the film and television industry.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32025897"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "User authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let respData = pm.response.json();",
									"pm.collectionVariables.set(\"token\", respData.token);",
									"",
									"",
									"// Test for the presence of token and userID in response",
									"pm.test(\"Response contains token and userID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData).to.have.property(\"userID\");",
									"    pm.expect(jsonData.token).to.be.a(\"string\");",
									"    pm.expect(jsonData.userID).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Token is in valid JWT format\", function () {",
									"    var responseJson = pm.response.json();",
									"    var tokenParts = responseJson.token.split('.');",
									"",
									"    pm.expect(tokenParts.length).to.eql(3); // JWT typically has 3 parts",
									"});",
									"",
									"pm.test(\"Response time is less than 100ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(100);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"",
									"// Test for status code 401",
									"pm.test(\"Status code is 401 for invalid credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test for the error message",
									"pm.test(\"Response contains the error message for invalid credentials\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});",
									"",
									"// Test for status code 500",
									"pm.test(\"Status code is 500 for server error\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"// Test for the error message and detailed error",
									"pm.test(\"Response contains error message for server error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"description": "(Required) The username of the user"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"description": "(Required) The password of the user"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "This endpoint authenticates a user by their username and password, and returns a token and user ID upon successful authentication. The token is invalidated automatically 1 hour after it is issued."
					},
					"response": [
						{
							"name": "Successful authentication",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The username of the user"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password of the user"
										}
									]
								},
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/login",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"<string>\",\n  \"userID\": \"<string>\"\n}"
						},
						{
							"name": "Invalid username or password",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The username of the user"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password of the user"
										}
									]
								},
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/login",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The username of the user"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password of the user"
										}
									]
								},
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/login",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"login"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "logout",
			"item": [
				{
					"name": "User logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful logout with valid token - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Unauthorized - No token provided - Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains the appropriate error message for no token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"No token provided\");",
									"});",
									"pm.test(\"Unauthorized - Invalid token - Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains the appropriate error message for invalid token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
									"});",
									"pm.test(\"Server error - Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Response contains server error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"    pm.expect(jsonData.error).to.be.a(\"string\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is within acceptable limits\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(100); ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token received upon successful login",
								"key": "X-OBSERVATORY-AUTH",
								"value": "{{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							]
						},
						"description": "This endpoint is used to signal the frontend to discard the authentication token from local storage. The API itself does not invalidate the token, as it is stateless. A valid token must be provided in the 'X-OBSERVATORY-AUTH' header."
					},
					"response": [
						{
							"name": "Logout signal successfully received",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authentication token received upon successful login",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/logout",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized - No token provided or token is invalid",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authentication token received upon successful login",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/logout",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"logout"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authentication token received upon successful login",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/logout",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "healthcheck",
					"item": [
						{
							"name": "System Health Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Health status indicates success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"OK\");",
											"});",
											"",
											"pm.test('Response format is JSON when \\'format\\' query parameter is not specified', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"})",
											"",
											"pm.test(\"Validate the response format is CSV\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/csv\");",
											"});",
											"",
											"pm.test('Status and dataconnection properties are present in the response', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('dataconnection');",
											"})",
											"",
											"pm.test('Status and dataconnection properties have the expected format', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Status should not be empty');",
											"    pm.expect(responseData.dataconnection).to.be.an('array').and.to.have.lengthOf.at.least(1, 'Dataconnection should not be empty');",
											"})",
											"",
											"",
											"pm.test(\"Response time is less than 100ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(100);",
											"});",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error message for unauthorized access\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.include(\"token\");",
											"});",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Health status indicates failure\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"failed\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "{{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/healthcheck?format={{format}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"healthcheck"
									],
									"query": [
										{
											"key": "format",
											"value": "{{format}}",
											"description": "Format of returned data, json or csv (json if not specified)."
										}
									]
								},
								"description": "Provides health status information of the system. Accessible only by admin users. Supports JSON and CSV response formats."
							},
							"response": [
								{
									"name": "System health check successful",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/admin/healthcheck?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"admin",
												"healthcheck"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format or 'json' for JSON format, defaults to JSON if not specified."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"OK\",\n  \"dataconnection\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								{
									"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/admin/healthcheck?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"admin",
												"healthcheck"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format or 'json' for JSON format, defaults to JSON if not specified."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Health check failed or server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/admin/healthcheck?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"admin",
												"healthcheck"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format or 'json' for JSON format, defaults to JSON if not specified."
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "upload",
					"item": [
						{
							"name": "titlebasics",
							"item": [
								{
									"name": "Upload Title Basics Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 for successful upload\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Success message is received\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"File processed and data inserted successfully\");",
													"});",
													"",
													"pm.test(\"Status code is 400 for no file uploaded or wrong file format\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for no file uploaded\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"No file uploaded\")",
													"});",
													"",
													"pm.test(\"Status code is 401 for unauthorized access\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error message for unauthorized access\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.include(\"token\");",
													"});",
													"",
													"pm.test(\"Status code is 500 for server error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Error message and details for server error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData).to.have.property(\"error\");",
													"});",
													"",
													"pm.test(\"Error message for wrong file format\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"Invalid file type\");",
													"});",
													"",
													"",
													"// Performance test to check response time is less than 2000ms ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "The TSV file containing title basics data to be uploaded.",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/admin/upload/titlebasics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"upload",
												"titlebasics"
											]
										},
										"description": "Allows admins to upload a TSV (Tab-Separated Values) file containing title basics data. The file is processed and the data is inserted into the database."
									},
									"response": [
										{
											"name": "File processed and data inserted successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title basics data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titlebasics",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titlebasics"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "No file uploaded or wrong file type uploaded",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title basics data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titlebasics",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titlebasics"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title basics data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titlebasics",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titlebasics"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Error processing file or internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title basics data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titlebasics",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titlebasics"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "titleakas",
							"item": [
								{
									"name": "Upload Title Akas Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 for successful upload\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Success message is received\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"File processed and data inserted successfully\");",
													"});",
													"",
													"pm.test(\"Status code is 400 for no file uploaded or wrong file format\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for no file uploaded\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"No file uploaded\")",
													"});",
													"",
													"pm.test(\"Status code is 401 for unauthorized access\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error message for unauthorized access\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.include(\"token\");",
													"});",
													"",
													"pm.test(\"Status code is 500 for server error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Error message and details for server error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData).to.have.property(\"error\");",
													"});",
													"",
													"pm.test(\"Error message for wrong file format\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"Invalid file type\");",
													"});",
													"",
													"// Performance test to check response time is less than 2000ms ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "The TSV file containing title akas data to be uploaded.",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/admin/upload/titleakas",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"upload",
												"titleakas"
											]
										},
										"description": "Allows admins to upload a TSV (Tab-Separated Values) file containing title akas data. The file is processed and the data is inserted into the database."
									},
									"response": [
										{
											"name": "File processed and data inserted successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title akas data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleakas",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleakas"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "No file uploaded or wrong file type uploaded",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title akas data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleakas",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleakas"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title akas data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleakas",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleakas"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Error processing file or internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title akas data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleakas",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleakas"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "namebasics",
							"item": [
								{
									"name": "Upload Name Basics Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 for successful upload\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Success message is received\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"File processed and data inserted successfully\");",
													"});",
													"",
													"pm.test(\"Status code is 400 for no file uploaded or wrong file format\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for no file uploaded\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"No file uploaded\")",
													"});",
													"",
													"pm.test(\"Status code is 401 for unauthorized access\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error message for unauthorized access\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.include(\"token\");",
													"});",
													"",
													"pm.test(\"Status code is 500 for server error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Error message and details for server error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData).to.have.property(\"error\");",
													"});",
													"",
													"pm.test(\"Error message for wrong file format\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"Invalid file type\");",
													"});",
													"",
													"// Performance test to check response time is less than 2000ms ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "The TSV file containing name basics data to be uploaded.",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/admin/upload/namebasics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"upload",
												"namebasics"
											]
										},
										"description": "Allows admins to upload a TSV (Tab-Separated Values) file containing name basics data. The file is processed and the data is inserted into the database."
									},
									"response": [
										{
											"name": "File processed and data inserted successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing name basics data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/namebasics",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"namebasics"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "No file uploaded or wrong file type uploaded",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing name basics data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/namebasics",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"namebasics"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing name basics data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/namebasics",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"namebasics"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Error processing file or internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing name basics data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/namebasics",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"namebasics"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "titlecrew",
							"item": [
								{
									"name": "Upload Title Crew Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 for successful upload\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Success message is received\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"File processed and data inserted successfully\");",
													"});",
													"",
													"pm.test(\"Status code is 400 for no file uploaded or wrong file format\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for no file uploaded\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"No file uploaded\")",
													"});",
													"",
													"pm.test(\"Status code is 401 for unauthorized access\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error message for unauthorized access\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.include(\"token\");",
													"});",
													"",
													"pm.test(\"Status code is 500 for server error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Error message and details for server error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData).to.have.property(\"error\");",
													"});",
													"",
													"pm.test(\"Error message for wrong file format\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"Invalid file type\");",
													"});",
													"",
													"// Performance test to check response time is less than 2000ms ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "The TSV file containing title crew data to be uploaded.",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/admin/upload/titlecrew",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"upload",
												"titlecrew"
											]
										},
										"description": "Allows admins to upload a TSV (Tab-Separated Values) file containing title crew data. The file is processed and the data is inserted into the database."
									},
									"response": [
										{
											"name": "File processed and data inserted successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title crew data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titlecrew",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titlecrew"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "No file uploaded or wrong file type uploaded",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title crew data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titlecrew",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titlecrew"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title crew data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titlecrew",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titlecrew"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Error processing file or internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title crew data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titlecrew",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titlecrew"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "titleepisode",
							"item": [
								{
									"name": "Upload Title Episode Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 for successful upload\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Success message is received\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"File processed and data inserted successfully\");",
													"});",
													"",
													"pm.test(\"Status code is 400 for no file uploaded or wrong file format\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for no file uploaded\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"No file uploaded\")",
													"});",
													"",
													"pm.test(\"Status code is 401 for unauthorized access\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error message for unauthorized access\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.include(\"token\");",
													"});",
													"",
													"pm.test(\"Status code is 500 for server error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Error message and details for server error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData).to.have.property(\"error\");",
													"});",
													"",
													"pm.test(\"Error message for wrong file format\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"Invalid file type\");",
													"});",
													"",
													"// Performance test to check response time is less than 2000ms ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "The TSV file containing title episode data to be uploaded.",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/admin/upload/titleepisode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"upload",
												"titleepisode"
											]
										},
										"description": "Allows admins to upload a TSV (Tab-Separated Values) file containing title episode data. The file is processed and the data is inserted into the database."
									},
									"response": [
										{
											"name": "File processed and data inserted successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title episode data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleepisode",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleepisode"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "No file uploaded or wrong file type uploaded",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title episode data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleepisode",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleepisode"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title episode data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleepisode",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleepisode"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Error processing file or internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title episode data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleepisode",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleepisode"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "titleprincipals",
							"item": [
								{
									"name": "Upload Title Principals Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 for successful upload\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Success message is received\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"File processed and data inserted successfully\");",
													"});",
													"",
													"pm.test(\"Status code is 400 for no file uploaded or wrong file format\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for no file uploaded\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"No file uploaded\")",
													"});",
													"",
													"pm.test(\"Status code is 401 for unauthorized access\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error message for unauthorized access\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.include(\"token\");",
													"});",
													"",
													"pm.test(\"Status code is 500 for server error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Error message and details for server error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData).to.have.property(\"error\");",
													"});",
													"",
													"pm.test(\"Error message for wrong file format\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"Invalid file type\");",
													"});",
													"",
													"// Performance test to check response time is less than 2000ms ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "The TSV file containing title principals data to be uploaded.",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/admin/upload/titleprincipals",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"upload",
												"titleprincipals"
											]
										},
										"description": "Allows admins to upload a TSV (Tab-Separated Values) file containing title principals data. The file is processed and the data is inserted into the database."
									},
									"response": [
										{
											"name": "File processed and data inserted successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title principals data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleprincipals",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleprincipals"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "No file uploaded or wrong file type uploaded",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title principals data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleprincipals",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleprincipals"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title principals data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleprincipals",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleprincipals"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Error processing file or internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title principals data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleprincipals",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleprincipals"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "titleratings",
							"item": [
								{
									"name": "Upload Title Ratings Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 for successful upload\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Success message is received\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"File processed and data inserted successfully\");",
													"});",
													"",
													"pm.test(\"Status code is 400 for no file uploaded or wrong file format\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for no file uploaded\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"No file uploaded\")",
													"});",
													"",
													"pm.test(\"Status code is 401 for unauthorized access\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error message for unauthorized access\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.include(\"token\");",
													"});",
													"",
													"pm.test(\"Status code is 500 for server error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Error message and details for server error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData).to.have.property(\"error\");",
													"});",
													"",
													"pm.test(\"Error message for wrong file format\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"Invalid file type\");",
													"});",
													"pm.test(\"Response status code is 500\", function () {",
													"  pm.expect(pm.response.code).to.equal(500);",
													"});",
													"",
													"",
													"// Performance test to check response time is less than 2000ms ",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "The TSV file containing title ratings data to be uploaded.",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/admin/upload/titleratings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"upload",
												"titleratings"
											]
										},
										"description": "Allows admins to upload a TSV (Tab-Separated Values) file containing title ratings data. The file is processed and the data is inserted into the database."
									},
									"response": [
										{
											"name": "File processed and data inserted successfully",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title ratings data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleratings",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleratings"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "No file uploaded or wrong file type uploaded",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title ratings data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleratings",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleratings"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title ratings data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleratings",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleratings"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Error processing file or internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "<string>",
															"description": "The TSV file containing title ratings data to be uploaded.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleratings",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"upload",
														"titleratings"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "resetall",
					"item": [
						{
							"name": "Reset Database",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200 for successful reset and status is equal to OK\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"OK\");",
											"});",
											"",
											"",
											"pm.test(\"Status code is 401 for unauthorized access\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error message for unauthorized access\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.include(\"token\");",
											"});",
											"",
											"pm.test(\"Status code is 500 for server error and status is equal to failed\", function () {",
											"    pm.response.to.have.status(500);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"failed\");",
											"});",
											"",
											"pm.test(\"Failure status message and reason for server error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(jsonData).to.have.property(\"reason\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint. Only admin users are authorized to perform this operation.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "{{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/resetall",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"resetall"
									]
								},
								"description": "Truncates all tables in the database, effectively resetting the database to its initial state. This endpoint is restricted to admin users and requires authentication."
							},
							"response": [
								{
									"name": "Database successfully reset",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint. Only admin users are authorized to perform this operation.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/admin/resetall",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"admin",
												"resetall"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint. Only admin users are authorized to perform this operation.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/admin/resetall",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"admin",
												"resetall"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error during database reset",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint. Only admin users are authorized to perform this operation.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/admin/resetall",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"admin",
												"resetall"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"<string>\",\n  \"reason\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "usermod",
					"item": [
						{
							"name": "{username}",
							"item": [
								{
									"name": "{password}",
									"item": [
										{
											"name": "Modify User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 for successful user creation/update\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Success message is received\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"message\");",
															"    pm.expect(jsonData.message).to.include(\"successfully\")",
															"});",
															"",
															"pm.test(\"Status code is 400 for missing or invalid fields\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Error message for missing fields\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"message\");",
															"    pm.expect(jsonData.message).to.include(\"Missing required fields\");",
															"});",
															"",
															"pm.test(\"Error message for invalid fields\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"message\");",
															"    pm.expect(jsonData.message).to.include(\"Bad Request: \");",
															"});",
															"",
															"pm.test(\"Status code is 401 for unauthorized access\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Error message for unauthorized access\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"message\");",
															"    pm.expect(jsonData.message).to.include(\"token\");",
															"});",
															"",
															"pm.test(\"Status code is 500 for server error\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Error message and detailed error for server error\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.property(\"message\");",
															"    pm.expect(jsonData).to.have.property(\"error\");",
															"});",
															"",
															"pm.test(\"Response time is less than 200ms\", function () {",
															"  pm.expect(pm.response.responseTime).to.be.below(200);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "{{token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{email}}\",\n  \"isAdmin\": \"1\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/admin/usermod/:username/:password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"admin",
														"usermod",
														":username",
														":password"
													],
													"variable": [
														{
															"key": "username",
															"value": "{{newUsername}}",
															"description": "User's username"
														},
														{
															"key": "password",
															"value": "{{newPassword}}",
															"description": "User's password"
														}
													]
												},
												"description": "Creates a new user or updates an existing user's details. Both email and isAdmin fields are required in the request body. This operation is restricted to admin users."
											},
											"response": [
												{
													"name": "User created or updated successfully",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authentication token required for accessing this endpoint.",
																"key": "X-OBSERVATORY-AUTH",
																"value": "<string>"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"email\": \"<email>\",\n  \"isAdmin\": \"0\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://localhost:9876/ntuaflix_api/admin/usermod/:username/:password",
															"protocol": "https",
															"host": [
																"localhost"
															],
															"port": "9876",
															"path": [
																"ntuaflix_api",
																"admin",
																"usermod",
																":username",
																":password"
															],
															"variable": [
																{
																	"key": "username"
																},
																{
																	"key": "password"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\"\n}"
												},
												{
													"name": "Bad Request - Missing required fields",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authentication token required for accessing this endpoint.",
																"key": "X-OBSERVATORY-AUTH",
																"value": "<string>"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"email\": \"<email>\",\n  \"isAdmin\": \"0\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://localhost:9876/ntuaflix_api/admin/usermod/:username/:password",
															"protocol": "https",
															"host": [
																"localhost"
															],
															"port": "9876",
															"path": [
																"ntuaflix_api",
																"admin",
																"usermod",
																":username",
																":password"
															],
															"variable": [
																{
																	"key": "username"
																},
																{
																	"key": "password"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\"\n}"
												},
												{
													"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authentication token required for accessing this endpoint.",
																"key": "X-OBSERVATORY-AUTH",
																"value": "<string>"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"email\": \"<email>\",\n  \"isAdmin\": \"0\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://localhost:9876/ntuaflix_api/admin/usermod/:username/:password",
															"protocol": "https",
															"host": [
																"localhost"
															],
															"port": "9876",
															"path": [
																"ntuaflix_api",
																"admin",
																"usermod",
																":username",
																":password"
															],
															"variable": [
																{
																	"key": "username"
																},
																{
																	"key": "password"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\"\n}"
												},
												{
													"name": "Internal server error during user modification",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authentication token required for accessing this endpoint.",
																"key": "X-OBSERVATORY-AUTH",
																"value": "<string>"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"email\": \"<email>\",\n  \"isAdmin\": \"0\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://localhost:9876/ntuaflix_api/admin/usermod/:username/:password",
															"protocol": "https",
															"host": [
																"localhost"
															],
															"port": "9876",
															"path": [
																"ntuaflix_api",
																"admin",
																"usermod",
																":username",
																":password"
															],
															"variable": [
																{
																	"key": "username"
																},
																{
																	"key": "password"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "{username}",
							"item": [
								{
									"name": "Get User Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 for successful user retrieval\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"User information is received in json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"user\");",
													"    pm.expect(jsonData.user).to.have.property(\"newUsername\");",
													"    pm.expect(jsonData.user).to.have.property(\"email\");",
													"    pm.expect(jsonData.user).to.have.property(\"isAdmin\");",
													"    pm.expect(jsonData.user).to.have.property(\"created_at\");",
													"    ",
													"});",
													"",
													"pm.test(\"Status code is 500 for server error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Error message and detailed error for server error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData).to.have.property(\"error\");",
													"});",
													"",
													"pm.test(\"Status code is 401 for unauthorized access\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"",
													"});",
													"",
													"pm.test(\"Status code is 404 for user not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error message for user not found\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.eql(\"User not found\");",
													"});",
													"",
													"pm.test(\"Response format is CSV\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"text/csv; charset=utf-8\");",
													"});",
													"",
													"pm.test(\"Response contains correct CSV fields\", function () {",
													"    var csvData = pm.response.text();",
													"",
													"    pm.expect(csvData).to.include('\"username\",\"password\",\"email\",\"isAdmin\",\"created_at\"');",
													"});",
													"",
													"pm.test(\"Specific user data is correct for harrypapadakis\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    var user = jsonData.user;",
													"    pm.expect(user.username).to.eql(\"harrypapadakis\");",
													"    pm.expect(user.email).to.eql(\"user@example.com\");",
													"    pm.expect(user.password).to.eql(\"$2b$10$4YWhGaw43NRT02V/hRJSfuANWuX2a8PntTQbPdM2KGDjrQrh6T3F2\");",
													"    pm.expect(user.created_at).to.eql(\"2024-01-10T10:27:21.000Z\");",
													"    pm.expect(user.isAdmin).to.eql(\"1\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "{{token}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/users/:username?format={{format}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users",
												":username"
											],
											"query": [
												{
													"key": "format",
													"value": "{{format}}",
													"description": "Format of returned data, json or csv (json if not specified)."
												}
											],
											"variable": [
												{
													"key": "username",
													"value": "{{username}}",
													"description": "User's username"
												}
											]
										},
										"description": "Retrieves details of a specific user by username. Supports JSON and CSV response formats. Accessible only by admin users."
									},
									"response": [
										{
											"name": "User information retrieved successfully",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/users/:username?format=<string>",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"users",
														":username"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>",
															"description": "Response format. Can be 'csv' for CSV format or 'json' for JSON format, defaults to JSON if not specified."
														}
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"user\": {\n    \"username\": \"<string>\",\n    \"password\": \"<string>\",\n    \"email\": \"<string>\",\n    \"isAdmin\": \"<string>\",\n    \"created_at\": \"<dateTime>\"\n  }\n}"
										},
										{
											"name": "Unauthorized - Token not provided, invalid, or user is not an admin",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/users/:username?format=<string>",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"users",
														":username"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>",
															"description": "Response format. Can be 'csv' for CSV format or 'json' for JSON format, defaults to JSON if not specified."
														}
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "User not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/users/:username?format=<string>",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"users",
														":username"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>",
															"description": "Response format. Can be 'csv' for CSV format or 'json' for JSON format, defaults to JSON if not specified."
														}
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error during user retrieval",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/admin/users/:username?format=<string>",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"admin",
														"users",
														":username"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>",
															"description": "Response format. Can be 'csv' for CSV format or 'json' for JSON format, defaults to JSON if not specified."
														}
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "title",
			"item": [
				{
					"name": "{titleID}",
					"item": [
						{
							"name": "Get Title Information by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Average rating is updated correctly after update\", function(){",
											"    const responseData = pm.response.json();",
											"    const titleObject = responseData.titleObject;",
											"    ",
											"    let prevAvRating = parseFloat(pm.collectionVariables.get(\"prevAvRating\"));",
											"    let prevNVotes = parseInt(pm.collectionVariables.get(\"prevNVotes\"), 10);",
											"    let oldUserRating = parseFloat(pm.collectionVariables.get(\"oldUserRating\")); // The rating before update",
											"    let newUserRating = parseFloat(pm.collectionVariables.get(\"uploadedRating\")); // The new rating",
											"    ",
											"    let totalRatingSumBeforeUpdate = prevAvRating * prevNVotes;",
											"    let totalRatingSumAfterUpdate = totalRatingSumBeforeUpdate - oldUserRating + newUserRating;",
											"    let newAvRatingExpected = totalRatingSumAfterUpdate / prevNVotes;",
											"    ",
											"    let newAvRatingActual = parseFloat(titleObject.rating.avRating);",
											"    ",
											"    pm.expect(newAvRatingActual).to.approximately(newAvRatingExpected, 0.01, \"Average rating did not update correctly\");",
											"",
											"});",
											"",
											"",
											"",
											"pm.test(\"Average rating is updated correctly after deletion\", function () {",
											"    const responseData = pm.response.json();",
											"    const { rating } = responseData.titleObject;",
											"    const newAvRating = parseFloat(rating.avRating);",
											"    const newNVotes = parseInt(rating.nVotes, 10);",
											"    ",
											"    const prevAvRating = parseFloat(pm.collectionVariables.get(\"prevAvRating\"));",
											"    const prevNVotes = parseInt(pm.collectionVariables.get(\"prevNVotes\"), 10);",
											"    ",
											"    // Assuming a rating was successfully deleted, calculate the expected new average",
											"    let expectedNewAvRating;",
											"    if (prevNVotes > 1) {",
											"        expectedNewAvRating = ((prevAvRating * prevNVotes) - pm.collectionVariables.get(\"uploadedRating\")) / (prevNVotes - 1);",
											"    } else {",
											"        // Handle case where the last rating was deleted",
											"        expectedNewAvRating = 0; // Adjust based on how your system handles this case",
											"    }",
											"    ",
											"    // Verify the new average rating",
											"    pm.expect(newAvRating).to.approximately(expectedNewAvRating, 0.01, \"Average rating did not update correctly\");",
											"    pm.expect(newNVotes).to.eql(prevNVotes - 1, \"Number of votes did not update correctly\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Average rating is updated correctly after insertion\", function () {",
											"    const responseJson = pm.response.json();",
											"    const titleObject = responseJson.titleObject;",
											"    ",
											"    let prevAvRating = parseFloat(pm.variables.get(\"prevAvRating\"));",
											"    let prevNVotes = parseInt(pm.variables.get(\"prevNVotes\"), 10);",
											"    let newRating = parseFloat(pm.variables.get(\"uploadedRating\"));",
											"    ",
											"    // Calculate the new expected average rating.",
											"    let newAvRatingExpected = ((prevAvRating * prevNVotes) + newRating) / (prevNVotes + 1);",
											"",
											"    // Get the new average rating and number of votes from the response.",
											"    let newAvRatingActual = parseFloat(titleObject.rating.avRating);",
											"    let newNVotesActual = parseInt(titleObject.rating.nVotes, 10);",
											"",
											"    // Assert the new average rating and number of votes are as expected.",
											"    pm.expect(newAvRatingActual).to.approximately(newAvRatingExpected, 0.01, \"Average rating did not update correctly\");",
											"    pm.expect(newNVotesActual).to.eql(prevNVotes + 1, \"Number of votes did not update correctly\");",
											"});",
											"",
											"",
											"let responseData = pm.response.json();",
											"let titleObject = responseData.titleObject;",
											"pm.collectionVariables.set(\"prevAvRating\", titleObject.rating.avRating);",
											"pm.collectionVariables.set(\"prevNVotes\", titleObject.rating.nVotes);",
											"",
											"pm.test(\"Response structure is correct\", function () {",
											"    let jsonData = pm.response.json();",
											"    ",
											"    // Check if titleObject is present",
											"    pm.expect(jsonData).to.have.property(\"titleObject\");",
											"",
											"    // Validate titleObject structure",
											"    let titleObject = jsonData.titleObject;",
											"    pm.expect(titleObject).to.have.property(\"titleID\");",
											"    pm.expect(titleObject).to.have.property(\"type\");",
											"    pm.expect(titleObject).to.have.property(\"originalTitle\");",
											"    pm.expect(titleObject).to.have.property(\"titlePoster\");",
											"    pm.expect(titleObject).to.have.property(\"startYear\");",
											"    pm.expect(titleObject).to.have.property(\"endYear\");",
											"    pm.expect(titleObject).to.have.property(\"genres\").that.is.an(\"array\");",
											"    pm.expect(titleObject).to.have.property(\"titleAkas\").that.is.an(\"array\");",
											"    pm.expect(titleObject).to.have.property(\"principals\").that.is.an(\"array\");",
											"    pm.expect(titleObject).to.have.property(\"rating\");",
											"",
											"    // Validate nested properties",
											"    if (titleObject.genres.length > 0) {",
											"        pm.expect(titleObject.genres[0]).to.have.property(\"genreTitle\");",
											"    }",
											"",
											"    if (titleObject.titleAkas.length > 0) {",
											"        pm.expect(titleObject.titleAkas[0]).to.have.property(\"akaTitle\");",
											"        pm.expect(titleObject.titleAkas[0]).to.have.property(\"regionAbbrev\");",
											"    }",
											"",
											"    if (titleObject.principals.length > 0) {",
											"        pm.expect(titleObject.principals[0]).to.have.property(\"nameID\");",
											"        pm.expect(titleObject.principals[0]).to.have.property(\"name\");",
											"        pm.expect(titleObject.principals[0]).to.have.property(\"category\");",
											"    }",
											"",
											"    pm.expect(titleObject.rating).to.have.property(\"avRating\");",
											"    pm.expect(titleObject.rating).to.have.property(\"nVotes\");",
											"});",
											"",
											"pm.test(\"Data validation for titleID tt0093099\", function () {",
											"    let titleObject = pm.response.json().titleObject;",
											"",
											"    // Validate titleObject structure and data",
											"    pm.expect(titleObject.titleID).to.eql(\"tt0093099\");",
											"    pm.expect(titleObject.type).to.eql(\"short\");",
											"    pm.expect(titleObject.originalTitle).to.eql(\"Going Equipped\");",
											"    pm.expect(titleObject.titlePoster).to.eql(\"https://image.tmdb.org/t/p/{width_variable}/6X0yrVj6YpATap4ybpEcimywbPG.jpg\");",
											"    pm.expect(titleObject.startYear).to.eql(\"1990\");",
											"    pm.expect(titleObject.endYear).to.be.null;",
											"",
											"    // Validate genres",
											"    let expectedGenres = [\"Animation\", \"Crime\", \"Documentary\"];",
											"    pm.expect(titleObject.genres.map(g => g.genreTitle)).to.have.members(expectedGenres);",
											"",
											"    // Validate titleAkas",
											"    let expectedAkas = [",
											"        { \"akaTitle\": \"Going Equipped\", \"regionAbbrev\": \"GB\" },",
											"        { \"akaTitle\": \"Going Equipped\", \"regionAbbrev\": null },",
											"        { \"akaTitle\": \"Lip synch: Going Equipped\", \"regionAbbrev\": \"SE\" },",
											"        { \"akaTitle\": \"Going Equipped\", \"regionAbbrev\": \"DE\" }",
											"    ];",
											"    expectedAkas.forEach((aka, index) => {",
											"        pm.expect(titleObject.titleAkas[index].akaTitle).to.eql(aka.akaTitle);",
											"        pm.expect(titleObject.titleAkas[index].regionAbbrev).to.eql(aka.regionAbbrev);",
											"    });",
											"",
											"    // Validate principals",
											"    let expectedPrincipals = [",
											"        { \"nameID\": \"nm0732550\", \"name\": \"Derek Robinson\", \"category\": \"self\" },",
											"        { \"nameID\": \"nm0520485\", \"name\": \"Peter Lord\", \"category\": \"director\" },",
											"        { \"nameID\": \"nm0612455\", \"name\": \"Sara Mullock\", \"category\": \"producer\" },",
											"        { \"nameID\": \"nm0715428\", \"name\": \"Fred Reed\", \"category\": \"cinematographer\" },",
											"        { \"nameID\": \"nm0725725\", \"name\": \"Dave Alex Riddett\", \"category\": \"cinematographer\" },",
											"        { \"nameID\": \"nm2766240\", \"name\": \"Susannah Shaw\", \"category\": \"cinematographer\" },",
											"        { \"nameID\": \"nm0819862\", \"name\": \"David Sproxton\", \"category\": \"cinematographer\" },",
											"        { \"nameID\": \"nm0257855\", \"name\": \"William Ennals\", \"category\": \"editor\" },",
											"        { \"nameID\": \"nm0942647\", \"name\": \"Michael Wright\", \"category\": \"production_designer\" }",
											"    ];",
											"    expectedPrincipals.forEach((principal, index) => {",
											"        pm.expect(titleObject.principals[index].nameID).to.eql(principal.nameID);",
											"        pm.expect(titleObject.principals[index].name).to.eql(principal.name);",
											"        pm.expect(titleObject.principals[index].category).to.eql(principal.category);",
											"    });",
											"",
											"    // Validate rating",
											"    pm.expect(titleObject.rating.avRating).to.eql(\"6.00\");",
											"    pm.expect(titleObject.rating.nVotes).to.eql(\"121\");",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Unauthorized access\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.code).to.equal(401);",
											"    pm.expect(jsonData.message).to.include(\"token\")",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"pm.test(\"Title not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.code).to.equal(404);",
											"    pm.expect(jsonData.message).to.include(\"Title not found\");",
											"});",
											"",
											"",
											"pm.test(\"Internal server error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.code).to.equal(500);",
											"    pm.expect(jsonData.message).to.include(\"error\");",
											"    pm.expect(jsonData.error);",
											"});",
											"",
											"pm.test(\"Status code is 200 and Content-Type is text/csv\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.header(\"Content-Type\", \"text/csv; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"CSV format data validation\", function () {",
											"    let csvText = pm.response.text();",
											"    let lines = csvText.split(\"\\n\");",
											"    ",
											"    // Check if headers are correct",
											"    pm.expect(lines[0]).to.eql('\"titleID\",\"type\",\"originalTitle\",\"titlePoster\",\"startYear\",\"endYear\",\"genres\",\"titleAkas\",\"principals\",\"avRating\",\"nVotes\"');",
											"    ",
											"    // Parse the CSV row for the specific titleID",
											"    let data = lines[1].split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/); // Regex to correctly split CSV fields",
											"",
											"    // Validate each field",
											"    pm.expect(data[0]).to.eql('\"tt0093099\"');",
											"    pm.expect(data[1]).to.eql('\"short\"');",
											"    pm.expect(data[2]).to.eql('\"Going Equipped\"');",
											"    pm.expect(data[3]).to.eql('\"https://image.tmdb.org/t/p/{width_variable}/6X0yrVj6YpATap4ybpEcimywbPG.jpg\"');",
											"    pm.expect(data[4]).to.eql('\"1990\"');",
											"    pm.expect(data[5]).to.eql(''); // Empty endYear",
											"    pm.expect(data[6]).to.eql('\"Animation; Crime; Documentary\"');",
											"",
											"    // Check titleAkas",
											"    let expectedAkas = '\"title: Going Equipped, region: GB; title: Going Equipped, region: null; title: Lip synch: Going Equipped, region: SE; title: Going Equipped, region: DE\"';",
											"    pm.expect(data[7]).to.eql(expectedAkas);",
											"",
											"    // Check principals",
											"    let expectedPrincipals = '\"nameID: nm0732550, name: Derek Robinson, category: self; nameID: nm0520485, name: Peter Lord, category: director; nameID: nm0612455, name: Sara Mullock, category: producer; nameID: nm0715428, name: Fred Reed, category: cinematographer; nameID: nm0725725, name: Dave Alex Riddett, category: cinematographer; nameID: nm2766240, name: Susannah Shaw, category: cinematographer; nameID: nm0819862, name: David Sproxton, category: cinematographer; nameID: nm0257855, name: William Ennals, category: editor; nameID: nm0942647, name: Michael Wright, category: production_designer\"';",
											"    pm.expect(data[8]).to.eql(expectedPrincipals);",
											"",
											"    // Check avRating and nVotes",
											"    pm.expect(data[9]).to.eql('\"6.00\"');",
											"    pm.expect(data[10]).to.eql('\"121\"');",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "{{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/title/:titleID?format={{format}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"title",
										":titleID"
									],
									"query": [
										{
											"key": "format",
											"value": "{{format}}",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									],
									"variable": [
										{
											"key": "titleID",
											"value": "{{uploadedTitleID}}",
											"description": "(Required) The unique identifier of the title."
										}
									]
								},
								"description": "Retrieves detailed information about a title, including genres, aliases, principals and rating based on the title ID. Supports JSON and CSV response formats."
							},
							"response": [
								{
									"name": "Title information retrieved successfully",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/title/:titleID?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"title",
												":titleID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											],
											"variable": [
												{
													"key": "titleID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"titleObject\": {\n    \"titleID\": \"<string>\",\n    \"type\": \"<string>\",\n    \"originalTitle\": \"<string>\",\n    \"titlePoster\": \"<string>\",\n    \"startYear\": \"<string>\",\n    \"endYear\": \"<string>\",\n    \"genres\": [\n      {\n        \"genreTitle\": \"<string>\"\n      },\n      {\n        \"genreTitle\": \"<string>\"\n      }\n    ],\n    \"titleAkas\": [\n      {\n        \"akaTitle\": \"<string>\",\n        \"regionAbbrev\": \"<string>\"\n      },\n      {\n        \"akaTitle\": \"<string>\",\n        \"regionAbbrev\": \"<string>\"\n      }\n    ],\n    \"principals\": [\n      {\n        \"nameID\": \"<string>\",\n        \"name\": \"<string>\",\n        \"category\": \"<string>\"\n      },\n      {\n        \"nameID\": \"<string>\",\n        \"name\": \"<string>\",\n        \"category\": \"<string>\"\n      }\n    ],\n    \"rating\": {\n      \"avRating\": \"<string>\",\n      \"nVotes\": \"<string>\"\n    }\n  }\n}"
								},
								{
									"name": "Unauthorized access",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/title/:titleID?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"title",
												":titleID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											],
											"variable": [
												{
													"key": "titleID"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Title not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/title/:titleID?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"title",
												":titleID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											],
											"variable": [
												{
													"key": "titleID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error during title retrieval",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/title/:titleID?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"title",
												":titleID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											],
											"variable": [
												{
													"key": "titleID"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "searchtitle",
			"item": [
				{
					"name": "Search Titles by Part of Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful search\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate search results structure\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"titleObjects\").that.is.an(\"array\");",
									"",
									"    if (jsonData.titleObjects.length > 0) {",
									"        let titleObject = jsonData.titleObjects[0];",
									"        pm.expect(titleObject).to.have.all.keys(\"titleID\", \"type\", \"originalTitle\", \"titlePoster\", \"startYear\", \"endYear\", \"genres\", \"titleAkas\", \"principals\", \"rating\");",
									"    }",
									"});",
									"",
									"pm.test(\"Search for 'wood' should return specific titles\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"titleObjects\").that.is.an(\"array\");",
									"",
									"    // List of expected title IDs",
									"    let expectedTitleIDs = [\"tt0102199\", \"tt0097516\", \"tt0099851\"];",
									"",
									"    // Extracting title IDs from the response",
									"    let responseTitleIDs = jsonData.titleObjects.map(obj => obj.titleID);",
									"",
									"    // Check if each expected title ID is present in the response",
									"    expectedTitleIDs.forEach(titleID => {",
									"        pm.expect(responseTitleIDs).to.include(titleID);",
									"    });",
									"});",
									"pm.test(\"Search for 'wood' should contain specific title with detailed attributes\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"titleObjects\").that.is.an(\"array\");",
									"",
									"    let foundTitle = jsonData.titleObjects.find(obj => obj.titleID === \"tt0099851\");",
									"",
									"    // Check if the specific title is found",
									"    pm.expect(foundTitle).to.not.be.undefined;",
									"",
									"    // Validate the properties of the found title",
									"    pm.expect(foundTitle.type).to.eql(\"tvEpisode\");",
									"    pm.expect(foundTitle.originalTitle).to.eql(\"Into the Woods\");",
									"    pm.expect(foundTitle.titlePoster).to.eql(\"https://image.tmdb.org/t/p/{width_variable}/uwMNWZg9gxCNCeruYvEdBN3Zhyb.jpg\");",
									"    pm.expect(foundTitle.startYear).to.eql(\"1991\");",
									"    pm.expect(foundTitle.endYear).to.be.null;",
									"",
									"    // Validate genres",
									"    let expectedGenres = [\"Comedy\", \"Drama\", \"Romance\"];",
									"    let actualGenres = foundTitle.genres.map(g => g.genreTitle);",
									"    pm.expect(actualGenres).to.eql(expectedGenres);",
									"",
									"    // Validate titleAkas",
									"    let expectedAkas = [{ \"akaTitle\": \"Into the Woods\", \"regionAbbrev\": \"US\" }];",
									"    pm.expect(foundTitle.titleAkas).to.eql(expectedAkas);",
									"",
									"    // Validate principals",
									"    let expectedPrincipals = [",
									"        { \"nameID\": \"nm0001613\", \"name\": \"Bernadette Peters\", \"category\": \"actress\" },",
									"        { \"nameID\": \"nm0322306\", \"name\": \"Joanna Gleason\", \"category\": \"actress\" },",
									"        { \"nameID\": \"nm0956268\", \"name\": \"Chip Zien\", \"category\": \"actor\" },",
									"        { \"nameID\": \"nm0291839\", \"name\": \"Joy Franz\", \"category\": \"actress\" },",
									"        { \"nameID\": \"nm0487567\", \"name\": \"James Lapine\", \"category\": \"director\" },",
									"        { \"nameID\": \"nm0581034\", \"name\": \"Iris Merlis\", \"category\": \"producer\" },",
									"        { \"nameID\": \"nm0080259\", \"name\": \"Girish Bhargava\", \"category\": \"editor\" },",
									"        { \"nameID\": \"nm0833151\", \"name\": \"Tony Straiges\", \"category\": \"production_designer\" },",
									"        { \"nameID\": \"nm0528520\", \"name\": \"Edmund Lyndeck\", \"category\": \"actor\" },",
									"        { \"nameID\": \"nm0389058\", \"name\": \"Philip Hoffman\", \"category\": \"actor\" }",
									"    ];",
									"",
									"    // Validate each principal",
									"    expectedPrincipals.forEach((expectedPrincipal, index) => {",
									"        let actualPrincipal = foundTitle.principals[index];",
									"        pm.expect(actualPrincipal.nameID).to.eql(expectedPrincipal.nameID);",
									"        pm.expect(actualPrincipal.name).to.eql(expectedPrincipal.name);",
									"        pm.expect(actualPrincipal.category).to.eql(expectedPrincipal.category);",
									"    });",
									"",
									"    // Validate rating",
									"    pm.expect(foundTitle.rating.avRating).to.eql(\"8.70\");",
									"    pm.expect(foundTitle.rating.nVotes).to.eql(\"3181\");",
									"});",
									"",
									"pm.test(\"Status code is 200 and Content-Type is text/csv\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.header(\"Content-Type\", \"text/csv; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Streamlined CSV data validation for specific titles\", function () {",
									"    let csvText = pm.response.text();",
									"    let lines = csvText.split(\"\\n\");",
									"    ",
									"    // Check if headers are correct",
									"    pm.expect(lines[0]).to.eql('\"titleID\",\"type\",\"originalTitle\",\"titlePoster\",\"startYear\",\"endYear\",\"genres\",\"titleAkas\",\"principals\",\"avRating\",\"nVotes\"');",
									"    ",
									"    // Expected data for the selected fields of the titles",
									"    let expectedData = {",
									"        \"tt0097516\": {",
									"            originalTitle: \"Hollywood Boulevard II\",",
									"            type: \"movie\",",
									"            startYear: \"1990\",",
									"            genres: \"Comedy\",",
									"            avRating: \"5.30\",",
									"            nVotes: \"114\"",
									"        },",
									"        \"tt0099851\": {",
									"            originalTitle: \"Into the Woods\",",
									"            type: \"tvEpisode\",",
									"            startYear: \"1991\",",
									"            genres: \"Comedy; Drama; Romance\",",
									"            avRating: \"8.70\",",
									"            nVotes: \"3181\"",
									"        },",
									"        \"tt0102199\": {",
									"            originalTitle: \"Hollywood Babylon\",",
									"            type: \"tvEpisode\",",
									"            startYear: \"1991\",",
									"            genres: \"Documentary\",",
									"            avRating: \"5.40\",",
									"            nVotes: \"33\"",
									"        }",
									"    };",
									"",
									"    // Parse each line and validate the selected fields",
									"    lines.slice(1).forEach(line => {",
									"        let data = line.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/); // Correctly split CSV fields",
									"        let titleID = data[0].replace(/\"/g, ''); // Remove double quotes",
									"",
									"        if (expectedData[titleID]) {",
									"            // Validate selected fields for the specific title ID",
									"            pm.expect(data[2].replace(/\"/g, '')).to.eql(expectedData[titleID].originalTitle);",
									"            pm.expect(data[1].replace(/\"/g, '')).to.eql(expectedData[titleID].type);",
									"            pm.expect(data[4].replace(/\"/g, '')).to.eql(expectedData[titleID].startYear);",
									"            pm.expect(data[6].replace(/\"/g, '')).to.eql(expectedData[titleID].genres);",
									"            pm.expect(data[9].replace(/\"/g, '')).to.eql(expectedData[titleID].avRating);",
									"            pm.expect(data[10].replace(/\"/g, '')).to.eql(expectedData[titleID].nVotes);",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"No titles found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(404);",
									"    pm.expect(jsonData.message).to.eql(\"No titles found\");",
									"});",
									"",
									"pm.test(\"Unauthorized access\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(jsonData.message).to.include(\"token\");",
									"});",
									"",
									"pm.test(\"No title part provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(jsonData.message).to.eql(\"No title part provided\");",
									"});",
									"",
									"pm.test(\"Internal server error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(500);",
									"    pm.expect(jsonData.message).to.include(\"error\");",
									"    pm.expect(jsonData.error);",
									"});",
									"",
									"",
									"",
									"// Test to check the response time",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token required for accessing this endpoint.",
								"key": "X-OBSERVATORY-AUTH",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"titlePart\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/searchtitle?format={{format}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"searchtitle"
							],
							"query": [
								{
									"key": "format",
									"value": "{{format}}",
									"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
								}
							]
						},
						"description": "Searches for titles where the original title contains a given part. Supports JSON and CSV response formats. Returns 404 if no titles are found."
					},
					"response": [
						{
							"name": "Titles found matching the search criteria",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/searchtitle?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"searchtitle"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"titleObjects\": [\n    {\n      \"titleID\": \"<string>\",\n      \"type\": \"<string>\",\n      \"originalTitle\": \"<string>\",\n      \"titlePoster\": \"<string>\",\n      \"startYear\": \"<string>\",\n      \"endYear\": \"<string>\",\n      \"genres\": [\n        {\n          \"genreTitle\": \"<string>\"\n        },\n        {\n          \"genreTitle\": \"<string>\"\n        }\n      ],\n      \"titleAkas\": [\n        {\n          \"akaTitle\": \"<string>\",\n          \"regionAbbrev\": \"<string>\"\n        },\n        {\n          \"akaTitle\": \"<string>\",\n          \"regionAbbrev\": \"<string>\"\n        }\n      ],\n      \"principals\": [\n        {\n          \"nameID\": \"<string>\",\n          \"name\": \"<string>\",\n          \"category\": \"<string>\"\n        },\n        {\n          \"nameID\": \"<string>\",\n          \"name\": \"<string>\",\n          \"category\": \"<string>\"\n        }\n      ],\n      \"rating\": {\n        \"avRating\": \"<string>\",\n        \"nVotes\": \"<string>\"\n      }\n    },\n    {\n      \"titleID\": \"<string>\",\n      \"type\": \"<string>\",\n      \"originalTitle\": \"<string>\",\n      \"titlePoster\": \"<string>\",\n      \"startYear\": \"<string>\",\n      \"endYear\": \"<string>\",\n      \"genres\": [\n        {\n          \"genreTitle\": \"<string>\"\n        },\n        {\n          \"genreTitle\": \"<string>\"\n        }\n      ],\n      \"titleAkas\": [\n        {\n          \"akaTitle\": \"<string>\",\n          \"regionAbbrev\": \"<string>\"\n        },\n        {\n          \"akaTitle\": \"<string>\",\n          \"regionAbbrev\": \"<string>\"\n        }\n      ],\n      \"principals\": [\n        {\n          \"nameID\": \"<string>\",\n          \"name\": \"<string>\",\n          \"category\": \"<string>\"\n        },\n        {\n          \"nameID\": \"<string>\",\n          \"name\": \"<string>\",\n          \"category\": \"<string>\"\n        }\n      ],\n      \"rating\": {\n        \"avRating\": \"<string>\",\n        \"nVotes\": \"<string>\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "No title part provided",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/searchtitle?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"searchtitle"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized access",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/searchtitle?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"searchtitle"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "No titles found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/searchtitle?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"searchtitle"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error during title search",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/searchtitle?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"searchtitle"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "bygenre",
			"item": [
				{
					"name": "Get Titles by Genre",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 for successful search', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Validate search results structure', function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('titleObjects').that.is.an('array');",
									"    if (jsonData.titleObjects.length > 0) {",
									"        let titleObject = jsonData.titleObjects[0];",
									"        pm.expect(titleObject).to.have.all.keys('titleID', 'type', 'originalTitle', 'titlePoster', 'startYear', 'endYear', 'genres', 'titleAkas', 'principals', 'rating');",
									"    }",
									"})",
									"",
									"pm.test(\"Length of results equal to 4\", function () {",
									"     var responseJSON = pm.response.json();",
									"     pm.expect(responseJSON.titleObjects).to.have.lengthOf(4);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Check specific title IDs for genre 'comedy' and min rating '8'\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"titleObjects\").that.is.an(\"array\");",
									"",
									"    // List of expected title IDs",
									"    let expectedTitleIDs = [\"tt0099851\", \"tt0100578\", \"tt0102711\", \"tt0103062\"];",
									"",
									"    // Extracting title IDs from the response",
									"    let responseTitleIDs = jsonData.titleObjects.map(obj => obj.titleID);",
									"",
									"    // Check if each expected title ID is present in the response",
									"    expectedTitleIDs.forEach(titleID => {",
									"        pm.expect(responseTitleIDs).to.include(titleID);",
									"    });",
									"});",
									"pm.test(\"Search for 'wood' should contain specific title with detailed attributes\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"titleObjects\").that.is.an(\"array\");",
									"",
									"    let foundTitle = jsonData.titleObjects.find(obj => obj.titleID === \"tt0099851\");",
									"",
									"    // Check if the specific title is found",
									"    pm.expect(foundTitle).to.not.be.undefined;",
									"",
									"    // Validate the properties of the found title",
									"    pm.expect(foundTitle.type).to.eql(\"tvEpisode\");",
									"    pm.expect(foundTitle.originalTitle).to.eql(\"Into the Woods\");",
									"    pm.expect(foundTitle.titlePoster).to.eql(\"https://image.tmdb.org/t/p/{width_variable}/uwMNWZg9gxCNCeruYvEdBN3Zhyb.jpg\");",
									"    pm.expect(foundTitle.startYear).to.eql(\"1991\");",
									"    pm.expect(foundTitle.endYear).to.be.null;",
									"",
									"    // Validate genres",
									"    let expectedGenres = [\"Comedy\", \"Drama\", \"Romance\"];",
									"    let actualGenres = foundTitle.genres.map(g => g.genreTitle);",
									"    pm.expect(actualGenres).to.eql(expectedGenres);",
									"",
									"    // Validate titleAkas",
									"    let expectedAkas = [{ \"akaTitle\": \"Into the Woods\", \"regionAbbrev\": \"US\" }];",
									"    pm.expect(foundTitle.titleAkas).to.eql(expectedAkas);",
									"",
									"    // Validate principals",
									"    let expectedPrincipals = [",
									"        { \"nameID\": \"nm0001613\", \"name\": \"Bernadette Peters\", \"category\": \"actress\" },",
									"        { \"nameID\": \"nm0322306\", \"name\": \"Joanna Gleason\", \"category\": \"actress\" },",
									"        { \"nameID\": \"nm0956268\", \"name\": \"Chip Zien\", \"category\": \"actor\" },",
									"        { \"nameID\": \"nm0291839\", \"name\": \"Joy Franz\", \"category\": \"actress\" },",
									"        { \"nameID\": \"nm0487567\", \"name\": \"James Lapine\", \"category\": \"director\" },",
									"        { \"nameID\": \"nm0581034\", \"name\": \"Iris Merlis\", \"category\": \"producer\" },",
									"        { \"nameID\": \"nm0080259\", \"name\": \"Girish Bhargava\", \"category\": \"editor\" },",
									"        { \"nameID\": \"nm0833151\", \"name\": \"Tony Straiges\", \"category\": \"production_designer\" },",
									"        { \"nameID\": \"nm0528520\", \"name\": \"Edmund Lyndeck\", \"category\": \"actor\" },",
									"        { \"nameID\": \"nm0389058\", \"name\": \"Philip Hoffman\", \"category\": \"actor\" }",
									"    ];",
									"",
									"    // Validate each principal",
									"    expectedPrincipals.forEach((expectedPrincipal, index) => {",
									"        let actualPrincipal = foundTitle.principals[index];",
									"        pm.expect(actualPrincipal.nameID).to.eql(expectedPrincipal.nameID);",
									"        pm.expect(actualPrincipal.name).to.eql(expectedPrincipal.name);",
									"        pm.expect(actualPrincipal.category).to.eql(expectedPrincipal.category);",
									"    });",
									"",
									"    // Validate rating",
									"    pm.expect(foundTitle.rating.avRating).to.eql(\"8.70\");",
									"    pm.expect(foundTitle.rating.nVotes).to.eql(\"3181\");",
									"});",
									"",
									"",
									"pm.test(\"CSV format data validation for specific titles\", function () {",
									"    let csvText = pm.response.text();",
									"    let lines = csvText.split(\"\\n\");",
									"    ",
									"    // Check if headers are correct",
									"    pm.expect(lines[0]).to.eql('\"titleID\",\"type\",\"originalTitle\",\"titlePoster\",\"startYear\",\"endYear\",\"genres\",\"titleAkas\",\"principals\",\"avRating\",\"nVotes\"');",
									"",
									"    // Expected data for the title \"tt0099851\"",
									"    let expectedData = {",
									"        \"tt0099851\": {",
									"            type: \"tvEpisode\",",
									"            originalTitle: \"Into the Woods\",",
									"            titlePoster: \"https://image.tmdb.org/t/p/{width_variable}/uwMNWZg9gxCNCeruYvEdBN3Zhyb.jpg\",",
									"            startYear: \"1991\",",
									"            endYear: \"\",",
									"            genres: \"Comedy; Drama; Romance\",",
									"            // Further fields can be added here",
									"        }",
									"        // Add other titles' expected data similarly",
									"    };",
									"",
									"    // Parse each line and validate",
									"    lines.slice(1).forEach(line => {",
									"        let data = line.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/); // Correctly split CSV fields",
									"        let titleID = data[0].replace(/\"/g, ''); // Remove double quotes",
									"",
									"        if (expectedData[titleID]) {",
									"            // Validate each field for the specific title ID",
									"            pm.expect(data[1].replace(/\"/g, '')).to.eql(expectedData[titleID].type);",
									"            pm.expect(data[2].replace(/\"/g, '')).to.eql(expectedData[titleID].originalTitle);",
									"            pm.expect(data[3].replace(/\"/g, '')).to.eql(expectedData[titleID].titlePoster);",
									"            pm.expect(data[4].replace(/\"/g, '')).to.eql(expectedData[titleID].startYear);",
									"            // Add other validations as necessary",
									"        }",
									"    });",
									"});",
									"",
									"",
									"",
									"pm.test('No titles found', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(404);",
									"    pm.expect(jsonData.message).to.eql('No titles found');",
									"})",
									"",
									"pm.test('Unauthorized access', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(jsonData.message).to.include('token');",
									"})",
									"",
									"pm.test(\"Invalid request body\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(jsonData.message).to.include(\"Invalid\");",
									"});",
									"",
									"pm.test('Internal server error', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(500);",
									"    pm.expect(jsonData.message).to.include('error');",
									"    pm.expect(jsonData.error);",
									"})",
									"",
									"",
									"pm.test(\"Length of results equal to 3\", function () {",
									"     var responseJSON = pm.response.json();",
									"     pm.expect(responseJSON.titleObjects).to.have.lengthOf(3);",
									"});",
									"",
									"pm.test(\"Check specific title IDs for genre 'comedy', min rating '8' and yrFrom '1991'\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"titleObjects\").that.is.an(\"array\");",
									"",
									"    // List of expected title IDs",
									"    let expectedTitleIDs = [\"tt0099851\", \"tt0102711\", \"tt0103062\"];",
									"",
									"    // Extracting title IDs from the response",
									"    let responseTitleIDs = jsonData.titleObjects.map(obj => obj.titleID);",
									"",
									"    // Check if each expected title ID is present in the response",
									"    expectedTitleIDs.forEach(titleID => {",
									"        pm.expect(responseTitleIDs).to.include(titleID);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Length of results equal to 1\", function () {",
									"     var responseJSON = pm.response.json();",
									"     pm.expect(responseJSON.titleObjects).to.have.lengthOf(1);",
									"});",
									"",
									"pm.test(\"Check specific title IDs for genre 'comedy', min rating '8'  yrFrom '1980' and yrTo '1990'\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"titleObjects\").that.is.an(\"array\");",
									"",
									"    // List of expected title IDs",
									"    let expectedTitleIDs = [\"tt0100578\"];",
									"",
									"    // Extracting title IDs from the response",
									"    let responseTitleIDs = jsonData.titleObjects.map(obj => obj.titleID);",
									"",
									"    // Check if each expected title ID is present in the response",
									"    expectedTitleIDs.forEach(titleID => {",
									"        pm.expect(responseTitleIDs).to.include(titleID);",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token required for accessing this endpoint.",
								"key": "X-OBSERVATORY-AUTH",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"qgenre\": \"<string>\",\n  \"minrating\": \"<string>\",\n  \"yrFrom\": \"<string>\",\n  \"yrTo\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bygenre?format={{format}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bygenre"
							],
							"query": [
								{
									"key": "format",
									"value": "{{format}}",
									"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
								}
							]
						},
						"description": "Fetches titles based on genre, minimum rating, and an optional year range. Supports JSON and CSV response formats. Returns 404 if no titles are found."
					},
					"response": [
						{
							"name": "Titles found matching the criteria",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/bygenre?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"bygenre"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"titleObjects\": [\n    {\n      \"titleID\": \"<string>\",\n      \"type\": \"<string>\",\n      \"originalTitle\": \"<string>\",\n      \"titlePoster\": \"<string>\",\n      \"startYear\": \"<string>\",\n      \"endYear\": \"<string>\",\n      \"genres\": [\n        {\n          \"genreTitle\": \"<string>\"\n        },\n        {\n          \"genreTitle\": \"<string>\"\n        }\n      ],\n      \"titleAkas\": [\n        {\n          \"akaTitle\": \"<string>\",\n          \"regionAbbrev\": \"<string>\"\n        },\n        {\n          \"akaTitle\": \"<string>\",\n          \"regionAbbrev\": \"<string>\"\n        }\n      ],\n      \"principals\": [\n        {\n          \"nameID\": \"<string>\",\n          \"name\": \"<string>\",\n          \"category\": \"<string>\"\n        },\n        {\n          \"nameID\": \"<string>\",\n          \"name\": \"<string>\",\n          \"category\": \"<string>\"\n        }\n      ],\n      \"rating\": {\n        \"avRating\": \"<string>\",\n        \"nVotes\": \"<string>\"\n      }\n    },\n    {\n      \"titleID\": \"<string>\",\n      \"type\": \"<string>\",\n      \"originalTitle\": \"<string>\",\n      \"titlePoster\": \"<string>\",\n      \"startYear\": \"<string>\",\n      \"endYear\": \"<string>\",\n      \"genres\": [\n        {\n          \"genreTitle\": \"<string>\"\n        },\n        {\n          \"genreTitle\": \"<string>\"\n        }\n      ],\n      \"titleAkas\": [\n        {\n          \"akaTitle\": \"<string>\",\n          \"regionAbbrev\": \"<string>\"\n        },\n        {\n          \"akaTitle\": \"<string>\",\n          \"regionAbbrev\": \"<string>\"\n        }\n      ],\n      \"principals\": [\n        {\n          \"nameID\": \"<string>\",\n          \"name\": \"<string>\",\n          \"category\": \"<string>\"\n        },\n        {\n          \"nameID\": \"<string>\",\n          \"name\": \"<string>\",\n          \"category\": \"<string>\"\n        }\n      ],\n      \"rating\": {\n        \"avRating\": \"<string>\",\n        \"nVotes\": \"<string>\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "Invalid request body",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/bygenre?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"bygenre"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized access",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/bygenre?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"bygenre"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "No titles found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/bygenre?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"bygenre"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error during title retrieval",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/bygenre?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"bygenre"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "name",
			"item": [
				{
					"name": "{nameID}",
					"item": [
						{
							"name": "Get Person Information by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 for successful retrieval\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate person information structure\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"nameObject\");",
											"",
											"    let nameObject = jsonData.nameObject;",
											"    pm.expect(nameObject).to.have.all.keys(\"nameID\", \"name\", \"namePoster\", \"birthYr\", \"deathYr\", \"profession\", \"nameTitles\");",
											"   ",
											"});",
											"",
											"pm.test(\"Enhanced validate person information structure\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"nameObject\");",
											"",
											"    let nameObject = jsonData.nameObject;",
											"",
											"    // Validate properties of nameObject",
											"    pm.expect(nameObject).to.have.property(\"nameID\").that.is.a(\"string\");",
											"    pm.expect(nameObject.nameID).to.eql(\"nm0000430\");",
											"",
											"    pm.expect(nameObject).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(nameObject.name).to.eql(\"Steve Guttenberg\");",
											"",
											"    pm.expect(nameObject).to.have.property(\"namePoster\").that.is.a(\"string\");",
											"    pm.expect(nameObject.namePoster).to.eql(\"https://image.tmdb.org/t/p/{width_variable}/bdOuq7U6QqRT5VcuXT08tAIsnfs.jpg\");",
											"",
											"    pm.expect(nameObject).to.have.property(\"birthYr\").that.is.a(\"string\");",
											"    pm.expect(nameObject.birthYr).to.eql(\"1958\");",
											"",
											"    pm.expect(nameObject).to.have.property(\"deathYr\").that.satisfies(val => val === null || typeof val === 'string');",
											"",
											"    pm.expect(nameObject).to.have.property(\"profession\").that.is.a(\"string\");",
											"    pm.expect(nameObject.profession).to.include(\"actor\");",
											"    pm.expect(nameObject.profession).to.include(\"producer\");",
											"    pm.expect(nameObject.profession).to.include(\"soundtrack\");",
											"",
											"    pm.expect(nameObject).to.have.property(\"nameTitles\").that.is.an(\"array\");",
											"",
											"    // Validate the structure of the first item in the nameTitles array",
											"    if (nameObject.nameTitles.length > 0) {",
											"        let firstTitle = nameObject.nameTitles[0];",
											"        pm.expect(firstTitle).to.have.property(\"titleID\").that.is.a(\"string\");",
											"        pm.expect(firstTitle).to.have.property(\"category\").that.is.a(\"string\");",
											"",
											"        // Example validation for a specific title",
											"        pm.expect(firstTitle.titleID).to.eql(\"tt0098966\");",
											"        pm.expect(firstTitle.category).to.eql(\"actor\");",
											"    }",
											"});",
											"",
											"pm.test(\"CSV format data validation for 'Steve Guttenberg'\", function () {",
											"    let csvText = pm.response.text();",
											"    let lines = csvText.split(\"\\n\");",
											"    ",
											"    // Check if headers are correct",
											"    pm.expect(lines[0]).to.eql('\"nameID\",\"name\",\"namePoster\",\"birthYr\",\"deathYr\",\"profession\",\"nameTitles\"');",
											"",
											"    // Assuming the person's data is on the second line (first line being the header)",
											"    let data = lines[1].split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/); // Correctly split CSV fields",
											"",
											"    // Validate the data for Steve Guttenberg",
											"    pm.expect(data[0].replace(/\"/g, '')).to.eql(\"nm0000430\");",
											"    pm.expect(data[1].replace(/\"/g, '')).to.eql(\"Steve Guttenberg\");",
											"    pm.expect(data[2].replace(/\"/g, '')).to.eql(\"https://image.tmdb.org/t/p/{width_variable}/bdOuq7U6QqRT5VcuXT08tAIsnfs.jpg\");",
											"    pm.expect(data[3].replace(/\"/g, '')).to.eql(\"1958\");",
											"    pm.expect(data[4].replace(/\"/g, '')).to.be.oneOf(['', null]); // Handling possible empty or null values",
											"    pm.expect(data[5].replace(/\"/g, '')).to.include(\"actor\");",
											"    pm.expect(data[5].replace(/\"/g, '')).to.include(\"producer\");",
											"    pm.expect(data[5].replace(/\"/g, '')).to.include(\"soundtrack\");",
											"    pm.expect(data[6].replace(/\"/g, '')).to.include(\"titleID: tt0098966\");",
											"    pm.expect(data[6].replace(/\"/g, '')).to.include(\"category: actor\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"pm.test(\"Person not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.code).to.equal(404);",
											"    pm.expect(jsonData.message).to.eql(\"Person not found\");",
											"});",
											"",
											"pm.test(\"Unauthorized access\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.code).to.equal(401);",
											"    pm.expect(jsonData.message).to.include(\"token\");",
											"});",
											"",
											"pm.test(\"Internal server error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.code).to.equal(500);",
											"    pm.expect(jsonData.message).to.include(\"error\");",
											"    pm.expect(jsonData.error);",
											"});",
											"pm.test(\"Content-Type header is 'text/csv'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('text/csv; charset=utf-8');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "{{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/name/:nameID?format={{format}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"name",
										":nameID"
									],
									"query": [
										{
											"key": "format",
											"value": "{{format}}",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									],
									"variable": [
										{
											"key": "nameID",
											"value": "{{nameID}}",
											"description": "(Required) The unique identifier of the person."
										}
									]
								},
								"description": "Retrieves detailed information about a person, including related titles and professions, based on their unique identifier. Supports JSON and CSV response formats. Returns 404 if the person is not found."
							},
							"response": [
								{
									"name": "Person information retrieved successfully",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/name/:nameID?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"name",
												":nameID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											],
											"variable": [
												{
													"key": "nameID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"nameObject\": {\n    \"nameID\": \"<string>\",\n    \"name\": \"<string>\",\n    \"namePoster\": \"<string>\",\n    \"birthYr\": \"<string>\",\n    \"deathYr\": \"<string>\",\n    \"profession\": \"<string>\",\n    \"nameTitles\": [\n      {\n        \"titleID\": \"<string>\",\n        \"category\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\",\n        \"category\": \"<string>\"\n      }\n    ]\n  }\n}"
								},
								{
									"name": "Unauthorized access",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/name/:nameID?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"name",
												":nameID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											],
											"variable": [
												{
													"key": "nameID"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Person not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/name/:nameID?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"name",
												":nameID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											],
											"variable": [
												{
													"key": "nameID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error during person retrieval",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/name/:nameID?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"name",
												":nameID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											],
											"variable": [
												{
													"key": "nameID"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "searchname",
			"item": [
				{
					"name": "Search Persons by Part of Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"NameObjects array is present and contains the expected number of elements\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.nameObjects).to.exist.and.to.be.an('array');",
									"  pm.expect(responseData.nameObjects).to.have.lengthOf(8);",
									"});",
									"",
									"",
									"pm.test(\"Each nameTitles object contains titleID and category\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.nameObjects).to.be.an('array');",
									"    ",
									"    responseData.nameObjects.forEach(function(nameObject) {",
									"        nameObject.nameTitles.forEach(function(nameTitle) {",
									"            pm.expect(nameTitle).to.have.property('titleID');",
									"            pm.expect(nameTitle).to.have.property('category');",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"CSV format data validation\", function () {",
									"    let csvText = pm.response.text();",
									"    let lines = csvText.split(\"\\n\");",
									"    pm.expect(lines[0]).to.eql('\"nameID\",\"name\",\"namePoster\",\"birthYr\",\"deathYr\",\"profession\",\"nameTitles\"');",
									"    // Further validations for CSV content",
									"});",
									"",
									"pm.test(\"No persons found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(404);",
									"    pm.expect(jsonData.message).to.eql(\"No matching names found\");",
									"});",
									"pm.test(\"Unauthorized access\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(jsonData.message).to.include(\"token\");",
									"});",
									"",
									"pm.test(\"Internal server error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.equal(500);",
									"    pm.expect(jsonData.message).to.include(\"error\");",
									"    pm.expect(jsonData.error);",
									"});",
									"",
									"pm.test(\"Search should contain specific details for Woody Allen\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"nameObjects\").that.is.an(\"array\");",
									"",
									"    let foundPerson = jsonData.nameObjects.find(obj => obj.nameID === \"nm0000095\");",
									"",
									"    // Check if Woody Allen's details are found",
									"    pm.expect(foundPerson).to.not.be.undefined;",
									"",
									"    // Validate the properties of Woody Allen's details",
									"    pm.expect(foundPerson.name).to.eql(\"Woody Allen\");",
									"    pm.expect(foundPerson.namePoster).to.eql(\"https://image.tmdb.org/t/p/{width_variable}/wcPQgZLDibuej1RwNTy1R2U2ZJw.jpg\");",
									"    pm.expect(foundPerson.birthYr).to.eql(\"1935\");",
									"    pm.expect(foundPerson.deathYr).to.be.null;",
									"    pm.expect(foundPerson.profession).to.include(\"actor\");",
									"    pm.expect(foundPerson.profession).to.include(\"director\");",
									"    pm.expect(foundPerson.profession).to.include(\"writer\");",
									"",
									"    // Validate titles associated with Woody Allen",
									"    let expectedTitle = {",
									"        titleID: \"tt0099012\",",
									"        category: \"director\"",
									"    };",
									"",
									"    let foundTitle = foundPerson.nameTitles.find(title => title.titleID === expectedTitle.titleID);",
									"    pm.expect(foundTitle).to.not.be.undefined;",
									"    pm.expect(foundTitle.category).to.eql(expectedTitle.category);",
									"});",
									"",
									"pm.test(\"Status code is 200 and Content-Type is text/csv for CSV response\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.header(\"Content-Type\", \"text/csv; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"CSV format data validation for 'Woody Allen'\", function () {",
									"    let csvText = pm.response.text();",
									"    let lines = csvText.split(\"\\n\");",
									"    ",
									"    // Check if headers are correct",
									"    pm.expect(lines[0]).to.eql('\"nameID\",\"name\",\"namePoster\",\"birthYr\",\"deathYr\",\"profession\",\"nameTitles\"');",
									"",
									"    // Find and validate Woody Allen's details",
									"    let found = false;",
									"    for (let i = 1; i < lines.length; i++) {",
									"        let data = lines[i].split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/); // Correctly split CSV fields",
									"",
									"        if (data[0].replace(/\"/g, '') === \"nm0000095\") {",
									"            found = true;",
									"            pm.expect(data[1].replace(/\"/g, '')).to.eql(\"Woody Allen\");",
									"            pm.expect(data[2].replace(/\"/g, '')).to.eql(\"https://image.tmdb.org/t/p/{width_variable}/wcPQgZLDibuej1RwNTy1R2U2ZJw.jpg\");",
									"            pm.expect(data[3].replace(/\"/g, '')).to.eql(\"1935\");",
									"            pm.expect(data[4].replace(/\"/g, '')).to.be.oneOf(['', null]); // Handling possible empty or null values",
									"            pm.expect(data[5].replace(/\"/g, '')).to.include(\"actor\");",
									"            pm.expect(data[5].replace(/\"/g, '')).to.include(\"director\");",
									"            pm.expect(data[5].replace(/\"/g, '')).to.include(\"writer\");",
									"            pm.expect(data[6].replace(/\"/g, '')).to.include(\"titleID: tt0099012\");",
									"            pm.expect(data[6].replace(/\"/g, '')).to.include(\"category: director\");",
									"            break;",
									"        }",
									"    }",
									"",
									"    // Check if Woody Allen's record was found",
									"    pm.expect(found).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token required for accessing this endpoint.",
								"key": "X-OBSERVATORY-AUTH",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"namePart\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/searchname?format={{format}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"searchname"
							],
							"query": [
								{
									"key": "format",
									"value": "{{format}}",
									"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
								}
							]
						},
						"description": "Searches for persons where the name contains a given part. Supports JSON and CSV response formats. Returns 404 if no persons are found."
					},
					"response": [
						{
							"name": "Persons found matching the search criteria",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/searchname?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"searchname"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"nameObjects\": [\n    {\n      \"nameID\": \"<string>\",\n      \"name\": \"<string>\",\n      \"namePoster\": \"<string>\",\n      \"birthYr\": \"<string>\",\n      \"deathYr\": \"<string>\",\n      \"profession\": \"<string>\",\n      \"nameTitles\": [\n        {\n          \"titleID\": \"<string>\",\n          \"category\": \"<string>\"\n        },\n        {\n          \"titleID\": \"<string>\",\n          \"category\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"nameID\": \"<string>\",\n      \"name\": \"<string>\",\n      \"namePoster\": \"<string>\",\n      \"birthYr\": \"<string>\",\n      \"deathYr\": \"<string>\",\n      \"profession\": \"<string>\",\n      \"nameTitles\": [\n        {\n          \"titleID\": \"<string>\",\n          \"category\": \"<string>\"\n        },\n        {\n          \"titleID\": \"<string>\",\n          \"category\": \"<string>\"\n        }\n      ]\n    }\n  ]\n}"
						},
						{
							"name": "No name part provided",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/searchname?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"searchname"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized access",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/searchname?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"searchname"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "No persons found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/searchname?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"searchname"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error during person search",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/searchname?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"searchname"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "uploadrating",
			"item": [
				{
					"name": "Upload User Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Rating uploaded successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    let respData = pm.response.json();",
									"    pm.expect(respData.message).to.eql(\"Rating uploaded successfully\");",
									"    // Optionally set variables for verification",
									"    pm.collectionVariables.set(\"uploadedTitleID\", \"tt0081008\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message in the response should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"// This should be in a separate request with missing fields",
									"pm.test(\"Status code is 400 for missing or invalid fields\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error message for missing fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Missing\");",
									"});",
									"",
									"pm.test(\"Invalid fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Invalid\");",
									"});",
									"",
									"// This should be in a separate request with invalid or missing auth token",
									"pm.test(\"Status code is 401 for unauthorized access\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has unauthorized access message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Unauthorized access\");",
									"});",
									"",
									"pm.test(\"Response has invalid token message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"token\");",
									"});",
									"",
									"// This test depends on being able to replicate a server error",
									"pm.test(\"Status code is 500 for server error\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Response has server error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"error\");",
									"    pm.expect(jsonData.error);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token required for accessing this endpoint.",
								"key": "X-OBSERVATORY-AUTH",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userID\": \"{{userID}}\",\n  \"titleID\": \"{{uploadedTitleID}}\",\n  \"userRating\": \"{{uploadedRating}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploadrating",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploadrating"
							]
						},
						"description": "Allows authenticated users to upload a rating for a title. Users can only upload ratings for their own user ID."
					},
					"response": [
						{
							"name": "Rating uploaded successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userID\": \"<string>\",\n  \"titleID\": \"<string>\",\n  \"userRating\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/uploadrating",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"uploadrating"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad Request - Missing required fields",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userID\": \"<string>\",\n  \"titleID\": \"<string>\",\n  \"userRating\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/uploadrating",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"uploadrating"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized access",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userID\": \"<string>\",\n  \"titleID\": \"<string>\",\n  \"userRating\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/uploadrating",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"uploadrating"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userID\": \"<string>\",\n  \"titleID\": \"<string>\",\n  \"userRating\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/uploadrating",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"uploadrating"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "ratings",
			"item": [
				{
					"name": "{userID}",
					"item": [
						{
							"name": "{titleID}",
							"item": [
								{
									"name": "Delete User Rating",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 for successful deletion\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains success message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Rating deleted successfully\");",
													"    pm.collectionVariables.set(\"deletedTitleID\", pm.collectionVariables.get(\"uploadedTitleID\")); ",
													"});",
													"",
													"pm.test(\"Status code is 401 for unauthorized access\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response contains unauthorized access message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Unauthorized to delete this rating\");",
													"});",
													"",
													"pm.test(\"Response contains invalid token message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.include(\"token\");",
													"});",
													"",
													"",
													"// Use a non-existing userID or titleID for this request",
													"pm.test(\"Status code is 404 for not found rating\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response contains not found message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Rating not found or already deleted\");",
													"});",
													"",
													"",
													"// This test depends on replicating a server error condition",
													"pm.test(\"Status code is 500 for server error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Response contains server error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.include(\"error\");",
													"    pm.expect(jsonData.error);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response time is within acceptable range\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "{{token}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ratings/:userID/:titleID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ratings",
												":userID",
												":titleID"
											],
											"variable": [
												{
													"key": "userID",
													"value": "{{userID}}",
													"description": "(Required) User ID "
												},
												{
													"key": "titleID",
													"value": "{{uploadedTitleID}}",
													"description": "(Required) Title ID of the title rating to be deleted"
												}
											]
										},
										"description": "Allows authenticated users to delete a rating for a title. Users can only delete ratings for their own user ID."
									},
									"response": [
										{
											"name": "Rating deleted successfully",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/ratings/:userID/:titleID",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"ratings",
														":userID",
														":titleID"
													],
													"variable": [
														{
															"key": "userID"
														},
														{
															"key": "titleID"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized to delete this rating",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/ratings/:userID/:titleID",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"ratings",
														":userID",
														":titleID"
													],
													"variable": [
														{
															"key": "userID"
														},
														{
															"key": "titleID"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Rating not found or already deleted",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/ratings/:userID/:titleID",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"ratings",
														":userID",
														":titleID"
													],
													"variable": [
														{
															"key": "userID"
														},
														{
															"key": "titleID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Server error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/ratings/:userID/:titleID",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"ratings",
														":userID",
														":titleID"
													],
													"variable": [
														{
															"key": "userID"
														},
														{
															"key": "titleID"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get User Ratings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify uploaded rating\", function () {",
											"    let responseData = pm.response.json();",
											"    pm.expect(responseData).to.have.property(\"ratings\");",
											"    const rating = responseData.ratings.find(r => r.title_id === pm.collectionVariables.get(\"uploadedTitleID\"));",
											"    pm.expect(rating).to.be.an(\"object\");",
											"    pm.expect(rating.user_rating).to.eql(pm.collectionVariables.get(\"uploadedRating\"));",
											"});",
											"",
											"pm.test(\"Deleted rating is not present\", function () {",
											"    let responseData = pm.response.json();",
											"    let deletedTitleID = pm.collectionVariables.get(\"deletedTitleID\"); ",
											"    const rating = responseData.ratings.find(r => r.title_id === deletedTitleID);",
											"",
											"    pm.expect(rating).to.be.undefined; // If 'rating' is undefined, the rating was successfully deleted",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response has the required fields - userID and ratings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.userID).to.exist;",
											"    pm.expect(responseData).to.have.property('ratings');",
											"    pm.expect(responseData.ratings).to.be.an('array');",
											"",
											"});",
											"",
											"",
											"pm.test(\"Each rating object in the response contains the required fields - title_id and user_rating\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.ratings).to.be.an('array');",
											"    responseData.ratings.forEach(function(rating) {",
											"        pm.expect(rating).to.have.property('title_id');",
											"        pm.expect(rating).to.have.property('user_rating');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Validate the format of userID is a string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.userID).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Ratings array is present and contains the expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.ratings).to.exist.and.to.be.an('array');",
											"    pm.expect(responseData.ratings).to.have.lengthOf(3);",
											"});",
											"",
											"// Use an invalid or missing auth token for this request",
											"pm.test(\"Status code is 401 for unauthorized access\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response contains unauthorized access message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized access\");",
											"});",
											"",
											"pm.test(\"Response contains invalid token message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.include(\"token\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"pm.test(\"Response status code is 500 for server error\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Response contains error message for server error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData).to.have.property(\"error\");",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Response is in CSV format\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/csv; charset=utf-8\");",
											"    var responseBody = pm.response.text();",
											"    pm.expect(responseBody).to.include('\"title_id\",\"user_rating\"');",
											"    pm.expect(responseBody).to.include('\"tt0034841\",\"9\"');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "{{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ratings/:userID?format={{format}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ratings",
										":userID"
									],
									"query": [
										{
											"key": "format",
											"value": "{{format}}",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									],
									"variable": [
										{
											"key": "userID",
											"value": "{{userID}}",
											"description": "(Required) User ID "
										}
									]
								},
								"description": "Retrieves all ratings made by a specific user. Users can only retrieve their own ratings."
							},
							"response": [
								{
									"name": "User ratings retrieved successfully",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/ratings/:userID?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"ratings",
												":userID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"userID\": \"<string>\",\n  \"ratings\": [\n    {\n      \"title_id\": \"<string>\",\n      \"user_rating\": \"<string>\"\n    },\n    {\n      \"title_id\": \"<string>\",\n      \"user_rating\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "Unauthorized access",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ratings/:userID?format=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ratings",
												":userID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userID"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ratings/:userID?format=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ratings",
												":userID"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userID"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "recommendations",
			"item": [
				{
					"name": "Get Movie Recommendations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response includes the movies array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('movies').that.is.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Each movie object in the 'movies' array contains the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.movies).to.be.an('array');",
									"    ",
									"    responseData.movies.forEach(function(movie) {",
									"        pm.expect(movie).to.include.all.keys('title_id', 'original_title', 'image_url_poster', 'average_rating', 'num_votes');",
									"    });",
									"});",
									"",
									"pm.test(\"Response contains specified IDs only\", function () {",
									"    var jsonData = pm.response.json();",
									"    var expectedIds = [",
									"        \"tt0095571\", \"tt0099006\", \"tt0090144\", \"tt0101480\", \"tt0093646\",",
									"        \"tt0098962\", \"tt0097966\", \"tt0099023\", \"tt0097783\", \"tt0099158\",",
									"        \"tt0099851\", \"tt0103062\", \"tt0102711\", \"tt0100578\", \"tt0099781\",",
									"        \"tt0095783\", \"tt0099037\", \"tt0103145\", \"tt0101971\", \"tt0098532\",\"tt0102643\",",
									"         \"tt0096752\", \"tt0102547\", \"tt0102769\", \"tt0102925\",",
									"    ];",
									"",
									"    var actualIds = jsonData.movies.map(movie => movie.title_id);",
									"",
									"    // Check for presence of each expected ID",
									"    expectedIds.forEach(function (id) {",
									"        pm.expect(actualIds).to.include(id, `Missing title_id: ${id}`);",
									"    });",
									"});",
									"",
									"pm.test(\"Number of results equal to 25\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.movies).to.be.an('array').that.has.lengthOf(25);",
									"}); ",
									"",
									"",
									"pm.test(\"Status code is 400 for bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains error message for bad request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Missing\");",
									"});",
									"",
									"pm.test(\"Response contains error message for wrong type of fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Genres and actors should be arrays of strings\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 401 for unauthorized access\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains unauthorized access message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"token\");",
									"});",
									"",
									"pm.test(\"Status code is 404 for no recommendations found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response contains no recommendations message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"No movies found\");",
									"});",
									"",
									"pm.test(\"Response is in CSV format\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/csv; charset=utf-8\");",
									"    var responseBody = pm.response.text();",
									"",
									"    // Check for headers",
									"       pm.expect(responseBody).to.include('\"title_id\",\"original_title\",\"image_url_poster\",\"average_rating\",\"num_votes\"');",
									"",
									"",
									"    // Check for a few sample rows",
									"    pm.expect(responseBody).to.include('\"tt0099851\",\"Into the Woods\",\"https://image.tmdb.org/t/p/{width_variable}/uwMNWZg9gxCNCeruYvEdBN3Zhyb.jpg\",\"8.70\",\"3181\"');",
									"    pm.expect(responseBody).to.include('\"tt0103062\",\"Tell Me That You Love Me\",\"https://image.tmdb.org/t/p/{width_variable}/hEBf4QPMswqPnOe6GlwhqDozhVi.jpg\",\"8.20\",\"41\"');",
									"    pm.expect(responseBody).to.include('\"tt0102711\",\"Prince\",\"https://image.tmdb.org/t/p/{width_variable}/oEjANiLQPAwAiDTVByFAkQfMruw.jpg\",\"8.10\",\"54\"');",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response status code is 500 for server error\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Response contains server error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"error\");",
									"    pm.expect(jsonData.error);",
									"});",
									"",
									"pm.test(\"Movies array does not contain duplicates\", function () {",
									"    const responseData = pm.response.json();",
									"    const movieIds = responseData.movies.map(movie => movie.title_id);",
									"    const uniqueMovieIds = new Set(movieIds);",
									"",
									"    pm.expect(uniqueMovieIds.size).to.eql(movieIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token required for accessing this endpoint.",
								"key": "X-OBSERVATORY-AUTH",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"genres\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"actors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"director\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/recommendations?format={{format}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recommendations"
							],
							"query": [
								{
									"key": "format",
									"value": "{{format}}",
									"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
								}
							]
						},
						"description": "Provides movie recommendations based on specified genres, actors, and a director. Retrieves top-rated movies for each criteria."
					},
					"response": [
						{
							"name": "Successful retrieval of movie recommendations",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/recommendations?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"recommendations"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"movies\": [\n    {\n      \"title_id\": \"<string>\",\n      \"original_title\": \"<string>\",\n      \"image_url_poster\": \"<string>\",\n      \"average_rating\": \"<string>\",\n      \"num_votes\": \"<string>\"\n    },\n    {\n      \"title_id\": \"<string>\",\n      \"original_title\": \"<string>\",\n      \"image_url_poster\": \"<string>\",\n      \"average_rating\": \"<string>\",\n      \"num_votes\": \"<string>\"\n    }\n  ]\n}"
						},
						{
							"name": "Bad Request - Missing required fields",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recommendations?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recommendations"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized access",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recommendations?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recommendations"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "No recommendations found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recommendations?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recommendations"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Server error during recommendations retrieval",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recommendations?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recommendations"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "titles",
			"item": [
				{
					"name": "{titleID}",
					"item": [
						{
							"name": "details",
							"item": [
								{
									"name": "Get Detailed Information of a Title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Validate the titleDetails object\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.titleDetails).to.exist.and.to.be.an('object');",
													"});",
													"",
													"",
													"pm.test(\"Genres array is present and contains expected number of elements for specific title\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.titleDetails).to.be.an('object');",
													"    pm.expect(responseData.titleDetails.genres).to.exist;",
													"    pm.expect(responseData.titleDetails.genres).to.be.an('array');",
													"    pm.expect(responseData.titleDetails.genres).to.have.lengthOf(2);",
													"});",
													"",
													"",
													"pm.test(\"LeadActors array is present and contains expected number of elements for specific title\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('titleDetails');",
													"    pm.expect(responseData.titleDetails.leadActors).to.be.an('array');",
													"    pm.expect(responseData.titleDetails.leadActors).to.have.lengthOf(2);",
													"});",
													"",
													"",
													"pm.test(\"Directors array is present and contains expected number of elements for specific title\", function () {",
													"  const responseData = pm.response.json();",
													"",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.titleDetails.directors).to.exist.and.to.be.an('array');",
													"  pm.expect(responseData.titleDetails.directors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"Status code is 200 and data is correct for titleID tt0099851\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var expectedDetails = {",
													"        \"titleID\": \"tt0099851\",",
													"        \"genres\": [",
													"            { \"genreTitle\": \"Comedy\" },",
													"            { \"genreTitle\": \"Drama\" }",
													"        ],",
													"        \"leadActors\": [",
													"            { \"nameID\": \"nm0001613\" },",
													"            { \"nameID\": \"nm0322306\" }",
													"        ],",
													"        \"directors\": [",
													"            { \"nameID\": \"nm0487567\" }",
													"        ]",
													"    };",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDetails).to.eql(expectedDetails);",
													"});",
													"",
													"",
													"// Use an invalid or missing auth token for this request",
													"pm.test(\"Status code is 401 for unauthorized access\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response contains unauthorized access message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.include(\"token\");",
													"});",
													"",
													"// Use a non-existing titleID for this request",
													"pm.test(\"Status code is 404 for title not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response contains title not found message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.include(\"found\");",
													"});",
													"",
													"",
													"pm.test(\"Status code is 500 for server error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Response contains server error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.include(\"error\");",
													"    pm.expect(jsonData.error);",
													"});",
													"",
													"pm.test(\"Response is in CSV format with correct data for titleID tt0099851\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"text/csv; charset=utf-8\");",
													"    var responseBody = pm.response.text();",
													"",
													"    var expectedCsvLine = '\"tt0099851\",\"Comedy; Drama\",\"nm0001613; nm0322306\",\"nm0487567\"';",
													"",
													"    // Check for CSV headers",
													"    pm.expect(responseBody).to.include('\"titleID\",\"genres\",\"leadActors\",\"directors\"');",
													"",
													"    // Check for specific title details in CSV format",
													"    pm.expect(responseBody).to.include(expectedCsvLine);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "{{token}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/titles/:titleID/details?format={{format}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"titles",
												":titleID",
												"details"
											],
											"query": [
												{
													"key": "format",
													"value": "{{format}}",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											],
											"variable": [
												{
													"key": "titleID",
													"value": "{{titleID}}",
													"description": "Title ID of the requested title"
												}
											]
										},
										"description": "Retrieves detailed information about a title, including top genres, lead actors, and directors, based on the title ID."
									},
									"response": [
										{
											"name": "Detailed information of the title",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/titles/:titleID/details?format=<string>",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"titles",
														":titleID",
														"details"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>",
															"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
														}
													],
													"variable": [
														{
															"key": "titleID"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"titleDetails\": {\n    \"titleID\": \"<string>\",\n    \"genres\": [\n      {\n        \"genreTitle\": \"<string>\"\n      },\n      {\n        \"genreTitle\": \"<string>\"\n      }\n    ],\n    \"leadActors\": [\n      {\n        \"nameID\": \"<string>\"\n      },\n      {\n        \"nameID\": \"<string>\"\n      }\n    ],\n    \"directors\": [\n      {\n        \"nameID\": \"<string>\"\n      },\n      {\n        \"nameID\": \"<string>\"\n      }\n    ]\n  }\n}"
										},
										{
											"name": "Unauthorized access",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/titles/:titleID/details?format=<string>",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"titles",
														":titleID",
														"details"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>",
															"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
														}
													],
													"variable": [
														{
															"key": "titleID"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Title not found, or not details available",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://localhost:9876/ntuaflix_api/titles/:titleID/details?format=<string>",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "9876",
													"path": [
														"ntuaflix_api",
														"titles",
														":titleID",
														"details"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>",
															"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
														}
													],
													"variable": [
														{
															"key": "titleID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authentication token required for accessing this endpoint.",
														"key": "X-OBSERVATORY-AUTH",
														"value": "<string>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/titles/:titleID/details?format=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"titles",
														":titleID",
														"details"
													],
													"query": [
														{
															"key": "format",
															"value": "<string>",
															"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
														}
													],
													"variable": [
														{
															"key": "titleID"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "home",
			"item": [
				{
					"name": "Get Data for Homepage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and data structure is correct in JSON format\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"",
									"    // Check for all properties",
									"    pm.expect(jsonData.data).to.have.property('topRatedMovies').that.is.an('array');",
									"    pm.expect(jsonData.data).to.have.property('newReleases').that.is.an('array');",
									"    pm.expect(jsonData.data).to.have.property('popularInAction').that.is.an('array');",
									"    pm.expect(jsonData.data).to.have.property('popularInComedy').that.is.an('array');",
									"    pm.expect(jsonData.data).to.have.property('popularInDrama').that.is.an('array');",
									"    pm.expect(jsonData.data).to.have.property('popularInRomance').that.is.an('array');",
									"    pm.expect(jsonData.data).to.have.property('popularInThriller').that.is.an('array');",
									"    pm.expect(jsonData.data).to.have.property('popularInHorror').that.is.an('array');",
									"    pm.expect(jsonData.data).to.have.property('popularInDocumentary').that.is.an('array');",
									"    pm.expect(jsonData.data).to.have.property('popularInAdventure').that.is.an('array');",
									"",
									"    // Optionally, add more specific checks for each property, like checking for the presence of 'titleID' in each array item",
									"});",
									"",
									"pm.test(\"Top Rated and New Releases contain correct movies\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    var expectedTopRated = [",
									"        \"tt0097949\", \"tt0099006\", \"tt0095571\", \"tt0097851\", \"tt0098542\",",
									"        \"tt0090144\", \"tt0098018\", \"tt0093646\", \"tt0096752\", \"tt0095111\",",
									"        \"tt0099028\", \"tt0093061\", \"tt0097066\", \"tt0098962\", \"tt0098999\",",
									"        \"tt0097571\", \"tt0097848\", \"tt0097253\", \"tt0098532\", \"tt0099023\"",
									"    ];",
									"",
									"    var expectedNewReleases = [",
									"        \"tt0015414\", \"tt0082473\", \"tt0093061\", \"tt0095469\", \"tt0097066\",",
									"        \"tt0096361\", \"tt0096362\", \"tt0098576\", \"tt0096363\", \"tt0080039\",",
									"        \"tt0097566\", \"tt0067460\", \"tt0040844\", \"tt0095102\", \"tt0090000\",",
									"        \"tt0097416\", \"tt0034841\", \"tt0094808\", \"tt0081008\", \"tt0090144\"",
									"    ];",
									"",
									"    var actualTopRated = jsonData.data.topRatedMovies.map(movie => movie.titleID);",
									"    var actualNewReleases = jsonData.data.newReleases.map(movie => movie.titleID);",
									"",
									"    // Check each movie in topRatedMovies",
									"    expectedTopRated.forEach(function (id) {",
									"        pm.expect(actualTopRated).to.include(id, `Top Rated missing titleID: ${id}`);",
									"    });",
									"",
									"    // Check each movie in newReleases",
									"    expectedNewReleases.forEach(function (id) {",
									"        pm.expect(actualNewReleases).to.include(id, `New Releases missing titleID: ${id}`);",
									"    });",
									"});",
									"",
									"pm.test(\"Each category contains 10 movies\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    // List of categories to check",
									"    var categories = [",
									"        'popularInAction', 'popularInComedy', 'popularInDrama',",
									"        'popularInRomance', 'popularInThriller', 'popularInHorror',",
									"        'popularInDocumentary', 'popularInAdventure'",
									"    ];",
									"",
									"    categories.forEach(function (category) {",
									"        pm.expect(jsonData.data[category]).to.be.an('array').that.has.lengthOf(10, `${category} does not have 10 movies`);",
									"    });",
									"});",
									"",
									"pm.test(\"Response is in CSV format with correct data\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/csv; charset=utf-8\");",
									"    var responseBody = pm.response.text();",
									"",
									"    // Check for CSV headers with quotes",
									"    pm.expect(responseBody).to.include('\"topRatedMovies\",\"newReleases\",\"popularInAction\",\"popularInComedy\",\"popularInDrama\",\"popularInRomance\",\"popularInThriller\",\"popularInHorror\",\"popularInDocumentary\",\"popularInAdventure\"');",
									"",
									"    // Check for specific data in CSV format with quotes",
									"    var expectedCsvLines = [",
									"        '\"tt0097949; tt0099006; tt0095571; tt0097851; tt0098542; tt0090144; tt0098018; tt0093646; tt0096752; tt0095111; tt0099028; tt0093061; tt0097066; tt0098962; tt0098999; tt0097571; tt0097848; tt0097253; tt0098532; tt0099023\"',",
									"        '\"tt0015414; tt0082473; tt0093061; tt0095469; tt0097066; tt0096361; tt0096362; tt0098576; tt0096363; tt0080039; tt0097566; tt0067460; tt0040844; tt0095102; tt0090000; tt0097416; tt0034841; tt0094808; tt0081008; tt0090144\"'",
									"        // Add expected lines for other categories as well, with quotes",
									"    ];",
									"",
									"    expectedCsvLines.forEach(function(line) {",
									"        pm.expect(responseBody).to.include(line);",
									"    });",
									"});",
									"",
									"// Use an invalid or missing auth token for this request",
									"pm.test(\"Status code is 401 for unauthorized access\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains unauthorized access message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"token\");",
									"});",
									"",
									"// This test depends on replicating a server error condition",
									"pm.test(\"Status code is 500 for server error\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Response contains server error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"error\");",
									"    pm.expect(jsonData.error);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 100ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token required for accessing this endpoint.",
								"key": "X-OBSERVATORY-AUTH",
								"value": "{{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/home?format={{format}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"home"
							],
							"query": [
								{
									"key": "format",
									"value": "{{format}}",
									"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
								}
							]
						},
						"description": "Retrieves various data for the homepage, including top-rated movies, new releases, and popular movies in different genres. Supports JSON and CSV response formats."
					},
					"response": [
						{
							"name": "Data for the homepage",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/home?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"home"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"topRatedMovies\": [\n      {\n        \"titleID\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\"\n      }\n    ],\n    \"newReleases\": [\n      {\n        \"titleID\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\"\n      }\n    ],\n    \"popularInAction\": [\n      {\n        \"titleID\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\"\n      }\n    ],\n    \"popularInComedy\": [\n      {\n        \"titleID\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\"\n      }\n    ],\n    \"popularInDrama\": [\n      {\n        \"titleID\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\"\n      }\n    ],\n    \"popularInRomance\": [\n      {\n        \"titleID\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\"\n      }\n    ],\n    \"popularInThriller\": [\n      {\n        \"titleID\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\"\n      }\n    ],\n    \"popularInHorror\": [\n      {\n        \"titleID\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\"\n      }\n    ],\n    \"popularInDocumentary\": [\n      {\n        \"titleID\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\"\n      }\n    ],\n    \"popularInAdventure\": [\n      {\n        \"titleID\": \"<string>\"\n      },\n      {\n        \"titleID\": \"<string>\"\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Unauthorized access",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://localhost:9876/ntuaflix_api/home?format=<string>",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9876",
									"path": [
										"ntuaflix_api",
										"home"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "<string>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/home?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"home"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "tv-shows",
			"item": [
				{
					"name": "episodes",
					"item": [
						{
							"name": "Get All Episodes of TV Shows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Response has correct structure and specific episodes', function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('shows').that.is.an('object');",
											"    var expectedShows = {",
											"        'tt0046593': {",
											"            '34': [{",
											"                    'episode_title_id': 'tt0099526',",
											"                    'season_number': '34',",
											"                    'episode_number': '13'",
											"                }]",
											"        },",
											"        'tt0086734': {",
											"            '7': [{",
											"                    'episode_title_id': 'tt0099811',",
											"                    'season_number': '7',",
											"                    'episode_number': '1'",
											"                }]",
											"        },",
											"        'tt0098765': {",
											"            '2': [{",
											"                    'episode_title_id': 'tt0102416',",
											"                    'season_number': '2',",
											"                    'episode_number': '1'",
											"                }]",
											"        }",
											"    };",
											"    for (var showId in expectedShows) {",
											"        pm.expect(jsonData.shows).to.have.property(showId);",
											"        for (var season in expectedShows[showId]) {",
											"            var expectedEpisodes = expectedShows[showId][season];",
											"            var actualEpisodes = jsonData.shows[showId][season];",
											"            expectedEpisodes.forEach(function (expectedEpisode, index) {",
											"                var actualEpisode = actualEpisodes[index];",
											"                pm.expect(actualEpisode.episode_title_id).to.eql(expectedEpisode.episode_title_id);",
											"                pm.expect(actualEpisode.season_number).to.eql(expectedEpisode.season_number);",
											"                pm.expect(actualEpisode.episode_number).to.eql(expectedEpisode.episode_number);",
											"            });",
											"        }",
											"    }",
											"})",
											"",
											"pm.test('Title tt0176357 has correct number of episodes in specified seasons', function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    var titleId = 'tt0176357';",
											"    var expectedEpisodes = {",
											"        '9': 3,",
											"        '10': 3",
											"    };",
											"    pm.expect(jsonData.shows).to.have.property(titleId).that.is.an('object');",
											"    for (var season in expectedEpisodes) {",
											"        pm.expect(jsonData.shows[titleId]).to.have.property(season).that.is.an('array');",
											"        pm.expect(jsonData.shows[titleId][season]).to.have.lengthOf(expectedEpisodes[season], `Season ${ season } does not have the correct number of episodes`);",
											"    }",
											"})",
											"",
											"pm.test('Title tt0806901 has correct episodes in seasons 20 and 21', function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    var titleId = 'tt0806901';",
											"    var expectedEpisodesSeason20 = [",
											"        '8',",
											"        '9',",
											"        '10'",
											"    ];",
											"    var expectedEpisodesSeason21 = [",
											"        '3',",
											"        '9'",
											"    ];",
											"    pm.expect(jsonData.shows).to.have.property(titleId).that.is.an('object');",
											"    pm.expect(jsonData.shows[titleId]).to.have.property('20').that.is.an('array');",
											"    pm.expect(jsonData.shows[titleId]).to.have.property('21').that.is.an('array');",
											"    function checkEpisodes(seasonEpisodes, expectedEpisodes) {",
											"        var episodeNumbers = seasonEpisodes.map(episode => episode.episode_number);",
											"        expectedEpisodes.forEach(function (episodeNumber) {",
											"            pm.expect(episodeNumbers).to.include(episodeNumber, `Season does not contain episode ${ episodeNumber }`);",
											"        });",
											"    }",
											"    checkEpisodes(jsonData.shows[titleId]['20'], expectedEpisodesSeason20);",
											"    checkEpisodes(jsonData.shows[titleId]['21'], expectedEpisodesSeason21);",
											"})",
											"",
											"pm.test(\"Response is in CSV format with correct data\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/csv; charset=utf-8\");",
											"    var responseBody = pm.response.text();",
											"",
											"    // Check for CSV headers with quotes",
											"    pm.expect(responseBody).to.include('\"episode_title_id\",\"episode_title\",\"parent_tv_show_title_id\",\"season_number\",\"episode_number\"');",
											"",
											"    // Check for specific episode details in CSV format with quotes",
											"    var expectedCsvLines = [",
											"        '\"tt0099526\",\"Exile\",\"tt0046593\",\"34\",\"13\"',",
											"        '\"tt0099811\",\"Deadly Encounters: Part 1\",\"tt0086734\",\"7\",\"1\"',",
											"        // ... (Add more lines for other episodes with quotes)",
											"    ];",
											"",
											"    expectedCsvLines.forEach(function(line) {",
											"        pm.expect(responseBody).to.include(line);",
											"    });",
											"});",
											"",
											"pm.test('Unauthorized request returns 401 status code', function () {",
											"    pm.response.to.have.status(401);",
											"})",
											"",
											"pm.test('Response contains unauthorized access message', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.include('token');",
											"})",
											"",
											"pm.test('Internal server error returns 500 status code', function () {",
											"    pm.response.to.have.status(500);",
											"})",
											"",
											"pm.test('Response contains server error message', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.include('error');",
											"    pm.expect(jsonData.error);",
											"})",
											"",
											"pm.test('Response time is less than 100ms', function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(100);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authentication token required for accessing this endpoint.",
										"key": "X-OBSERVATORY-AUTH",
										"value": "{{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tv-shows/episodes?format={{format}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tv-shows",
										"episodes"
									],
									"query": [
										{
											"key": "format",
											"value": "{{format}}",
											"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
										}
									]
								},
								"description": "Retrieves all episodes of TV shows along with their season and episode number."
							},
							"response": [
								{
									"name": "List of all TV show episodes",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/tv-shows/episodes?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"tv-shows",
												"episodes"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"shows\": {\n    \"amet__\": {\n      \"season_number\": [\n        {\n          \"episode_title_id\": \"<string>\",\n          \"episode_title\": \"<string>\",\n          \"parent_tv_show_title_id\": \"<string>\",\n          \"season_number\": \"<string>\",\n          \"episode_number\": \"<string>\"\n        },\n        {\n          \"episode_title_id\": \"<string>\",\n          \"episode_title\": \"<string>\",\n          \"parent_tv_show_title_id\": \"<string>\",\n          \"season_number\": \"<string>\",\n          \"episode_number\": \"<string>\"\n        }\n      ]\n    },\n    \"ullamco_fd6\": {\n      \"season_number\": [\n        {\n          \"episode_title_id\": \"<string>\",\n          \"episode_title\": \"<string>\",\n          \"parent_tv_show_title_id\": \"<string>\",\n          \"season_number\": \"<string>\",\n          \"episode_number\": \"<string>\"\n        },\n        {\n          \"episode_title_id\": \"<string>\",\n          \"episode_title\": \"<string>\",\n          \"parent_tv_show_title_id\": \"<string>\",\n          \"season_number\": \"<string>\",\n          \"episode_number\": \"<string>\"\n        }\n      ]\n    }\n  }\n}"
								},
								{
									"name": "Unauthorized access",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "token"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/tv-shows/episodes?format=format",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"tv-shows",
												"episodes"
											],
											"query": [
												{
													"key": "format",
													"value": "format",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"<string>\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authentication token required for accessing this endpoint.",
												"key": "X-OBSERVATORY-AUTH",
												"value": "<string>"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://localhost:9876/ntuaflix_api/tv-shows/episodes?format=<string>",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "9876",
											"path": [
												"ntuaflix_api",
												"tv-shows",
												"episodes"
											],
											"query": [
												{
													"key": "format",
													"value": "<string>",
													"description": "Response format. Can be 'csv' for CSV format, defaults to JSON if not specified."
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\",\n  \"error\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:9876/ntuaflix_api"
		},
		{
			"key": "username",
			"value": "username"
		},
		{
			"key": "password",
			"value": "password"
		},
		{
			"key": "token",
			"value": "token"
		},
		{
			"key": "format",
			"value": "format",
			"type": "string"
		},
		{
			"key": "titleID",
			"value": "titleID"
		},
		{
			"key": "nameID",
			"value": "nameID"
		},
		{
			"key": "userID",
			"value": "userID"
		},
		{
			"key": "uploadedRating",
			"value": "uploadedRating",
			"type": "string"
		},
		{
			"key": "uploadedTitleID",
			"value": "uploadedTitleID",
			"type": "string"
		},
		{
			"key": "prevAvRating",
			"value": "prevAvRating",
			"type": "string"
		},
		{
			"key": "prevNVotes",
			"value": "prevNVotes",
			"type": "string"
		},
		{
			"key": "oldUserRating",
			"value": "oldUserRating",
			"type": "string"
		},
		{
			"key": "deletedTitleID",
			"value": "deletedTitileID"
		},
		{
			"key": "email",
			"value": "email",
			"type": "string"
		},
		{
			"key": "newUsername",
			"value": "newUsername",
			"type": "string"
		},
		{
			"key": "newPassword",
			"value": "newPassword",
			"type": "string"
		}
	]
}