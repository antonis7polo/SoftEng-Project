create a footer component using styles similar to header and use it in all pages
// components/Header.js
import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { AppBar,Toolbar,Button, Typography, IconButton, InputBase, FormControl, Select, MenuItem, Box, Snackbar} from "@mui/material";
import {
  Home as HomeIcon,
  Search as SearchIcon,
  AccountCircle,
  Logout as LogoutIcon,
} from "@mui/icons-material";
import Link from "next/link";
import { useAuth } from "../context/AuthContext";

const Header = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [searchType, setSearchType] = useState("title");
  const { isLoggedIn, setIsLoggedIn, sessionExpiredMessage } =
    useAuth();
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const router = useRouter();

  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value);
  };

  const handleTypeChange = (event) => {
    const type = event.target.value;
    setSearchType(type);

    if (type === "genre") {
      router.push("/genre-search");
    }
  };

  const handleSearch = (event) => {
    event.preventDefault();
    // Redirect to the search page with query parameters
    router.push(
      `/search?term=${encodeURIComponent(searchTerm)}&type=${searchType}`
    );
  };

  useEffect(() => {
    if (sessionExpiredMessage) {
      setOpenSnackbar(true);
    }
  }, [sessionExpiredMessage]);

  const handleLogout = async () => {
    // Get token from the stored JSON object
    const tokenData = localStorage.getItem("tokenData");
    let token = null;
    if (tokenData) {
      token = JSON.parse(tokenData).token;
    }

    const response = await fetch("https://localhost:9876/ntuaflix_api/logout", {
      method: "POST",
      headers: {
        "X-OBSERVATORY-AUTH": token,
        "Content-Type": "application/json",
      },
    });

    if (response.ok) {
      localStorage.removeItem("tokenData");
      // Remove tokenData instead of just 'token'
      setIsLoggedIn(false);
      router.push("/");
    } else {
      console.error("Logout failed");
    }
  };

  const handleCloseSnackbar = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    setOpenSnackbar(false);
  };

  

  return (
    <>
      {sessionExpiredMessage && (
        <Snackbar
          open={openSnackbar}
          onClose={handleCloseSnackbar}
          autoHideDuration={5000}
          message={sessionExpiredMessage}
        />
      )}
      <AppBar
        position="static"
        style={{
          backgroundColor: `rgb(var(--card-background-color))`,
          boxShadow: "var(--shadow)",
        }}
      >
        <Toolbar
          className="container"
          sx={{ display: "flex", justifyContent: "flex-start", width: "60%" }}
        >
          {/* NTUAFlix button moved to full left */}
          <Box sx={{ flexGrow: 0 }}>
            <Link href="/home" passHref>
              <Button
                sx={{
                  color: `rgb(var(--primary-color))`,
                  textTransform: "none",
                  fontSize: "1.25rem",
                }}
              >
                NTUAFlix
              </Button>
            </Link>
          </Box>
          <Box sx={{ml: 20, flexGrow: 1, display: "flex", justifyContent: "center" }}>
            <FormControl variant="standard" sx={{ m: 1, minWidth: 80 }}>
              <Select
                value={searchType}
                onChange={handleTypeChange}
                displayEmpty
                inputProps={{ "aria-label": "search by type" }}
                sx={{
                  color: `rgb(var(--primary-color))`,
                  "& .MuiSvgIcon-root": { color: `rgb(var(--primary-color))` },
                }}
              >
                <MenuItem value="title">Search Title</MenuItem>
                <MenuItem value="name">Search Name</MenuItem>
                <MenuItem value="genre">Search by Genre</MenuItem>
              </Select>
            </FormControl>
            <InputBase
              sx={{ ml: 1, flex: 1, color: `rgb(var(--text-color))` }}
              placeholder="Searchâ€¦"
              inputProps={{ "aria-label": "search" }}
              value={searchTerm}
              onChange={handleSearchChange}
            />
            <IconButton
              type="submit"
              sx={{ p: "10px", mr: 20, color: `rgb(var(--primary-color))` }} // Added right margin
              aria-label="search"
              onClick={handleSearch}
            >
              <SearchIcon />
            </IconButton>
          </Box>

          <Box
            sx={{ flexGrow: 0, display: "flex", justifyContent: "flex-end" }}
          >
            {isLoggedIn ? (
              <>
                <Link href="/" passHref>
                  <IconButton sx={{ color: `rgb(var(--primary-color))` }}>
                    <AccountCircle />
                  </IconButton>
                </Link>
                <IconButton
                  sx={{ color: `rgb(var(--primary-color))` }}
                  onClick={handleLogout}
                >
                  <LogoutIcon />
                </IconButton>
              </>
            ) : (
              <Link href="/" passHref>
                <IconButton sx={{ color: `rgb(var(--primary-color))` }}>
                  <AccountCircle />
                </IconButton>
              </Link>
            )}
          </Box>
        </Toolbar>
      </AppBar>
    </>
  );
};

export default Header;

/* styles/globals.css */

:root {
    /* Updated Color Scheme for a Cinematic Feel */
    --button-text-color: 255, 255, 255; /* White text for buttons for legibility */
    --button-background-color: 34, 34, 34; /* Dark gray for a professional look */
    --button-hover-background-color: 68, 68, 68; /* Slightly lighter gray for hover state */

    /* Existing Color Variables */
    --primary-color: 20, 20, 20; /* Near black for a deep cinematic look */
    --secondary-color-1: 95, 100, 105; /* Subdued steel gray for less dominant elements */
    --secondary-color-2: 255, 220, 0; /* Bright gold for highlighting important elements (like star ratings) */
    --accent-color-1: 204, 0, 0; /* Red accent for critical actions or notifications */
    --accent-color-2: 0, 173, 239; /* Bright blue for links and interactive elements */
    --background-color: 248, 248, 255; /* Very light gray (almost white) for a neutral backdrop */
    --neutral-color: 112, 123, 129; /* Medium gray for neutral text */
    --form-background-color: #fff; /* White for forms to stand out against the other elements */
    
    /* Additional Variables */
    --max-width: 1200px;
    --border-radius: 4px; /* Smaller border radius for a more modern, clean look */
    --font-sans: 'Helvetica Neue', Arial, sans-serif; /* Helvetica Neue is widely used in modern web, fallback to Arial */
    --font-mono: 'Courier New', monospace;
    --shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
}


/* Button Styles for Better Contrast */
button, .MuiButton-root {
    color: rgb(var(--button-text-color)); /* Text color */
    background-color: rgb(var(--button-background-color)); /* Background color */
    transition: background-color 0.3s; /* Smooth transition for hover effect */
}

button:hover, .MuiButton-root:hover {
    background-color: rgb(var(--button-hover-background-color)); /* Background color on hover */
}


/* Global Styles */
* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

html, body {
    font-family: var(--font-sans);
    color: rgb(var(--text-on-light)); /* Text color for light background */
    background-color: rgb(var(--background-color));
    line-height: 1.6;
}

a {
    color: inherit;
    text-decoration: none;
}

/* Layout and Components */
.container {
    max-width: var(--max-width);
    margin: 0 auto;
    padding: 0 20px;
}

.search-bar {
    margin-bottom: 20px;
}



/* Card styles using secondary color */
.card {
    background-color: rgb(var(--primary-color)); /* Use secondary color for card background */
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    padding: 20px;
    margin: 5px; /* Smaller margin to create tighter columns */
    color: rgb(var(--button-text-color)); /* White text for better contrast */
    height: auto; /* Allow height to adjust to content */
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%; /* Set the card height to 100% to fill the container */
    width: 250px; /* Set a fixed width */
    padding-bottom: 10px; /* Ensure there's space at the bottom of the card */
    max-width: 300px; /* Set a maximum width to prevent the card from getting too large */


}


.movie-card {
    background-color: rgb(var(--primary-color)); /* Use secondary color for card background */
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    padding: 20px;
    margin: 5px; /* Smaller margin to create tighter columns */
    color: rgb(var(--button-text-color)); /* White text for better contrast */
    height: auto; /* Allow height to adjust to content */
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 90%; /* Set the card height to 100% to fill the container */
    width: 80%; /* Set a fixed width */
    padding-bottom: 10px; /* Ensure there's space at the bottom of the card */


}





/* Media query for responsive adjustments */
@media (max-width: 768px) {
    .card {
        width: auto; /* Allow cards to fill the container */
        margin: 10px; /* Adjust margin for better spacing on smaller screens */
    }
}

.movies-grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(20%, 1fr));
    /* This will create a grid with a minimum column size of 20% and a maximum of 1 fraction of the available space */
    gap: 5px; /* Spacing between grid items */
    padding: 10px; /* Padding around the grid */
}

/* Adjustments to movie card media to ensure uniform height */
.movie-card-media {
    height: 300px; /* Maintain a fixed height for all images */
    object-fit: cover;
    width: 100%;
    border-radius: var(--border-radius); /* Optional: to round the images to match the card */
    flex-shrink: 0; /* This will prevent the image from shrinking */
    object-fit: cover; /* This will prevent the image from stretching */
}



/* Apply the styles to the container that wraps your movie cards */
.movies-container {
    max-width: var(--max-width);
    margin: 0 auto;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around; /* This will create evenly spaced items with smaller gaps */
    padding: 0 10%; /* Example: Add padding to both sides */

}

.movie-card-content {
    flex: 1; /* Allows the content to expand and fill the available space */
    overflow: hidden; /* Hide overflow to maintain a clean appearance */
    display: flex; /* Use flex layout for better control */
    flex-direction: column; /* Stack elements vertically */
    justify-content: center; /* Center content vertically for a balanced look */
}
  
.movie-title {
    font-size: 1rem; /* Smaller font size for longer titles */
    line-height: 1.2; /* Tighter line height to fit more text */
    height: 3.6rem; /* Adjusted height based on the new font and line height */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add ellipsis to text that overflows */
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2; /* Limit to 2 lines of text */
    word-wrap: break-word; /* This will ensure the text wraps and fills the card */
    hyphens: auto; /* This can help with breaking words properly */
    padding: 0 5px; /* Add padding to prevent text from touching the card edges */
}


/* Login Form */
.login-form {
    max-width: 400px;
    margin: 20px auto;
    padding: 20px;
    border: 1px solid rgb(var(--neutral-color));
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    background-color: rgb(var(--form-background-color));
}

/* Footer */
.footer {
    text-align: center;
    padding: 20px;
    background-color: rgb(var(--primary-color));
    color: rgb(var(--text-color)); /* White text for footer */
    position: absolute;
    bottom: 0;
    width: 100%;
}

.slick-next {
    color: rgb(var(--button-text-color)) !important;
    background-color: rgb(var(--button-background-color)) !important;;
    right: 15px !important;
    z-index: 1;
    transition: background-color 0.3s ease !important;
}

.slick-next:hover {
    background-color: rgb(var(--button-hover-background-color)) !important;
}

.slick-prev {
    color: rgb(var(--button-text-color)) !important;
    background-color: rgb(var(--button-background-color)) !important;;
    left: 3px !important;
    cursor: pointer;
    z-index: 1;
    transition: background-color 0.3s ease !important;
}

.slick-prev:hover {
    background-color: rgb(var(--button-hover-background-color)) !important;
}

.slick-list {
    padding-left: 25px !important; /* Adjust this value to move items to the right */
}




.category-heading {
    color: rgb(var(--primary-color)); /* Subdued steel gray */
    margin-bottom: 20px; /* Space below the heading */
    font-family: var(--font-sans); /* Use the defined sans-serif font */
    font-size: 1.75rem; /* A moderate size for elegance */
    font-weight: 600; /* Bold, but not too bold */
    text-align: left; /* Align to the left for a clean look */
    padding-bottom: 10px; /* Space at the bottom */
    border-bottom: 2px solid rgb(var(--secondary-color-1)); /* A subtle line for a touch of sophistication */
}



.category-first-heading {
    color: rgb(var(--primary-color)); /* Subdued steel gray */
    margin-bottom: 30px; /* Space below the heading */
    font-family: var(--font-sans); /* Use the defined sans-serif font */
    font-size: 2rem; /* A moderate size for elegance */
    font-weight: 800; /* Bold, but not too bold */
    text-align: left; /* Align to the left for a clean look */
    padding-bottom: 10px; /* Space at the bottom */
}




    


ChatGPT
To create a footer component that complements the style of your existing header component, you can use similar styling conventions and React patterns. Below is an example of how you might implement a Footer component in your React application, using the same styling approaches as your Header.

Create a new file named Footer.js in your components directory and add the following code:

jsx
Copy code
// components/Footer.js
import React from 'react';
import Link from 'next/link';
import { AppBar, Toolbar, Typography } from '@mui/material';

const Footer = () => {
  return (
    <AppBar
      position="static"
      component="footer"
      style={{
        backgroundColor: `rgb(var(--primary-color))`,
        boxShadow: "var(--shadow)",
        marginTop: 'auto', // Ensures that the footer is at the bottom
      }}
    >
      <Toolbar
        className="container"
        sx={{ display: 'flex', justifyContent: 'center' }}
      >
        <Typography
          variant="body1"
          style={{ color: `rgb(var(--button-text-color))` }}
        >
          Â© {new Date().getFullYear()} NTUAFlix. All rights reserved.
        </Typography>
        {/* Add additional footer links or content here */}
      </Toolbar>
    </AppBar>
  );
};

export default Footer;
In your pages/_app.js or the main layout component, import and use this Footer component:

jsx
Copy code
import React from 'react';
import Header from '../components/Header';
import Footer from '../components/Footer';

const MyApp = ({ Component, pageProps }) => {
  return (
    <>
      <Header />
      <Component {...pageProps} />
      <Footer />
    </>
  );
};

export default MyApp;
This setup ensures that the Footer is used on all pages, similar to the Header. You can adjust the content and links within the Footer as needed for your application. The styling is based on the same CSS variables used in your Header for consistency in appearance.




User
Uploaded image
in some pages I have this problem
ChatGPT
It appears that you're encountering an issue with the layout of your web pages, specifically with the footer component. The footer is not staying at the bottom of the page or is overlapping with the content on some pages. This could be due to several reasons:

CSS Styles: Ensure that the footer has the correct CSS to stay at the bottom of the page. If the content is not enough to push the footer to the bottom, you might need to use a sticky footer approach.

Flexbox or Grid Layout: If you are using a flexbox or grid layout for your main container, make sure that the main content grows to fill the space so that the footer is pushed to the bottom.

Min-Height: The main content area should have a minimum height of 100vh (viewport height) minus the height of the header and footer to ensure that the footer stays at the bottom of the viewport when there is less content.

Incorrect Markup: Ensure that the footer is outside any main content containers that might be restricting its position to the inside of a content area.

Here is a CSS snippet that can help you ensure the footer sticks to the bottom:

css
Copy code
html, body {
  height: 100%;
}

#root { /* or the main wrapper of your app */
  display: flex;
  flex-direction: column;
  min-height: 100%;
}

.content {
  flex: 1; /* This will push the footer down */
}
And your React component structure should resemble:

jsx
Copy code
<div id="root">
  <Header />
  <div className="content">
    {/* Your routes and pages go here, this is what changes between pages */}
  </div>
  <Footer />
</div>
In your case, it seems like the .content div (which holds all your page content) might not be expanding as it should. This can be typically resolved by setting flex: 1 on the .content div so that it occupies all available space, thus pushing the footer to the bottom.

If you need more specific advice, please provide the CSS and JSX for the part of your application that's causing the issue, including the main layout and the page content where the footer isn't behaving correctly.




User
Uploaded image
push footer down
ChatGPT
The issue you're facing where the footer does not stay at the bottom of the page can usually be fixed with a combination of CSS and structural HTML adjustments.

The footer should be at the bottom of the viewport when the page content is not tall enough to push it down, and at the end of the page content when there is enough content to scroll. This is often referred to as a "sticky footer".

Here's a CSS snippet to help you ensure the footer sticks to the bottom of the page. This technique uses Flexbox:

css
Copy code
html, body {
  height: 100%;
  margin: 0; /* Reset default margin */
}

#root { /* or the main wrapper of your app */
  display: flex;
  flex-direction: column;
  min-height: 100vh; /* Use vh (Viewport Height) instead of % */
}

.content {
  flex: 1; /* This will allow the content area to expand and occupy any available space */
  /* Other styles for your content area */
}

.footer {
  flex-shrink: 0; /* Prevents the footer from shrinking */
  /* Other styles for your footer */
}
In your main layout, make sure the HTML structure resembles the following:

jsx
Copy code
<div id="root">
  <Header />
  <main className="content">
    {/* Your routes and pages go here, this is what changes between pages */}
  </main>
  <Footer className="footer"/>
</div>
Make sure that you have a <main> tag or a <div> with the class .content where your page content goes. This will ensure that your header, content, and footer are laid out in a column, with the content area expanding to fill the space.

Apply these styles to your React app, and the footer should stick to the bottom of the viewport when there's not enough content to fill the screen, and stay at the bottom of the content when there's more content to scroll through.





